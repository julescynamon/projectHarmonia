name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "8"

jobs:
  # Job de linting et v√©rification de code
  lint-and-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Type check
        run: npm run type-check

  # Job de tests unitaires et d'int√©gration
  test:
    name: Tests Unitaires & Int√©gration
    runs-on: ubuntu-latest
    needs: lint-and-check

    services:
      # Service PostgreSQL pour les tests
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: npm run test:setup

      - name: Validate test environment
        run: npm run test:validate

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job de tests E2E
  test-e2e:
    name: Tests E2E
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npm run playwright:install

      - name: Setup test environment
        run: npm run test:setup

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          BASE_URL: http://localhost:4322

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job de build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, test-e2e]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          # Variables d'environnement pour le build
          PUBLIC_SITE_URL: ${{ secrets.PUBLIC_SITE_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Job de d√©ploiement sur Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ D√©ploiement r√©ussi sur Vercel!"
          echo "URL: https://${{ secrets.VERCEL_PROJECT_ID }}.vercel.app"

  # Job de d√©ploiement sur Netlify (alternative)
  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build for Netlify
        run: npm run build
        env:
          NODE_ENV: production
          PUBLIC_SITE_URL: ${{ secrets.NETLIFY_SITE_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: "./dist"
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 1

  # Job de notifications d'erreurs
  notify-failure:
    name: Notifier les √©checs
    runs-on: ubuntu-latest
    needs:
      [lint-and-check, test, test-e2e, build, deploy-vercel, deploy-netlify]
    if: failure() && github.event_name == 'push'

    steps:
      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            ‚ùå √âchec du d√©ploiement pour ${{ github.repository }}
            Branche: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Auteur: ${{ github.actor }}
            Workflow: ${{ github.workflow }}
            URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notification
        if: failure()
        run: |
          echo "Envoi d'email de notification d'√©chec..."
          # Ici vous pouvez ajouter la logique d'envoi d'email
          # Par exemple avec curl vers un webhook ou un service d'email
        env:
          EMAIL_WEBHOOK_URL: ${{ secrets.EMAIL_WEBHOOK_URL }}

  # Job de notifications de succ√®s
  notify-success:
    name: Notifier le succ√®s
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-netlify]
    if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Notify Slack on success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            ‚úÖ D√©ploiement r√©ussi pour ${{ github.repository }}
            Branche: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Auteur: ${{ github.actor }}
            URL: https://${{ secrets.VERCEL_PROJECT_ID }}.vercel.app
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job de s√©curit√© et audit
  security-audit:
    name: Audit de s√©curit√©
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test

      - name: Test CSP configuration
        run: npm run test:csp

      - name: Test CORS configuration
        run: npm run test:cors

  # Job de performance
  performance-test:
    name: Tests de performance
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Start preview server
        run: npm run preview &
        env:
          NODE_ENV: production

      - name: Wait for server
        run: sleep 10

      - name: Run performance tests
        run: npm run test:performance
        env:
          BASE_URL: http://localhost:4322

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-report
          path: performance-report/
          retention-days: 30

---
// Page d'édition d'article avec TipTap
// src/pages/admin/post/[id].astro

export const prerender = false;

import AdminLayout from '../../../layouts/AdminLayout.astro';
import PostEditor from '../../../components/admin/PostEditor.jsx';
import { supabase } from '../../../lib/supabase';

// Récupérer l'ID de l'article depuis les paramètres
const { id } = Astro.params;

// Vérification de l'authentification
const session = Astro.locals.session;
if (!session?.user?.id) {
  return Astro.redirect('/login?returnTo=/admin/post/' + id);
}

// Vérification du rôle admin
const { data: profile, error: profileError } = await supabase
  .from('profiles')
  .select('role')
  .eq('id', session.user.id)
  .single();

const isMainAdmin = session.user.email === 'tyzranaima@gmail.com';
if (!isMainAdmin && (profileError || !profile || profile.role !== 'admin')) {
  return Astro.redirect('/mon-compte');
}

// Récupérer l'article à éditer
const { data: post, error } = await supabase
  .from('posts')
  .select('*')
  .eq('id', id)
  .eq('author_id', session.user.id)
  .single();

// Si l'article n'existe pas ou n'appartient pas à l'utilisateur
if (error || !post) {
  return Astro.redirect('/admin/blog');
}

// Préparer les données pour l'éditeur
const initialData = {
  id: post.id,
  title: post.title,
  slug: post.slug,
  excerpt: post.excerpt || '',
  cover_url: post.cover_url || '',
  cover_alt: post.cover_alt || '',
  content: post.content,
  tags: post.tags || [],
  seo_title: post.seo_title || '',
  seo_description: post.seo_description || '',
  status: post.status,
  published_at: post.published_at,
  author_id: post.author_id,
  created_at: post.created_at,
  updated_at: post.updated_at
};
---

<AdminLayout title={`Éditer : ${post.title}`}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">Éditer l'article</h1>
          <p class="mt-2 text-sm text-gray-700">
            Modifiez votre article avec l'éditeur TipTap
          </p>
        </div>
        <div class="flex items-center space-x-4">
          <a
            href="/admin/blog"
            class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sage"
          >
            ← Retour à la liste
          </a>
          {post.status === 'published' && (
            <a
              href={`/blog/${post.slug}`}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-sage hover:bg-sage-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sage"
            >
              Voir l'article
            </a>
          )}
        </div>
      </div>
    </div>

    <!-- Éditeur d'article -->
    <PostEditor 
      client:load
      initialData={initialData}
      postId={id}
      userId={session.user.id}
      onSave={async (postData) => {
        try {
          const response = await fetch(`/api/posts/${id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              ...postData,
              author_id: session.user.id
            })
          });
          
          if (!response.ok) throw new Error('Erreur lors de la sauvegarde');
          
          alert('Article sauvegardé en brouillon');
        } catch (error) {
          console.error('Erreur:', error);
          alert('Une erreur est survenue lors de la sauvegarde');
        }
      }}
      onPublish={async (postData) => {
        console.log('onPublish appelé avec:', postData);
        try {
          const response = await fetch(`/api/posts/${id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              ...postData,
              author_id: session.user.id
            })
          });
          
          console.log('Response status:', response.status);
          const responseData = await response.json();
          console.log('Response data:', responseData);
          
          if (!response.ok) throw new Error('Erreur lors de la publication');
          
          alert('Article publié avec succès !');
          // Rediriger vers la liste des articles
          window.location.href = '/admin/blog';
        } catch (error) {
          console.error('Erreur:', error);
          alert('Une erreur est survenue lors de la publication');
        }
      }}
    />

    <script define:vars={{ postId: id, userId: session.user.id }}>
      console.log('Script de la page Astro chargé');
      console.log('ID de l\'article:', postId);
      console.log('User ID:', userId);
      
      // Écouter les événements personnalisés du composant PostEditor
      window.addEventListener('postSave', async (event) => {
        console.log('Événement postSave reçu:', event.detail);
        
        const { postData, action } = event.detail;
        
        try {
          console.log('Envoi de la requête de sauvegarde à l\'API...');
          const response = await fetch(`/api/posts/${postId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              ...postData,
              author_id: userId
            })
          });
          
          console.log('Response status:', response.status);
          const responseData = await response.json();
          console.log('Response data:', responseData);
          
          if (!response.ok) {
            throw new Error(`Erreur ${response.status}: ${responseData.error || 'Erreur inconnue'}`);
          }
          
          alert('Article sauvegardé en brouillon !');
        } catch (error) {
          console.error('Erreur lors de la sauvegarde:', error);
          alert('Une erreur est survenue lors de la sauvegarde: ' + error.message);
        }
      });

      window.addEventListener('postPublish', async (event) => {
        console.log('Événement postPublish reçu:', event.detail);
        
        const { postData, action } = event.detail;
        
        try {
          console.log('Envoi de la requête à l\'API...');
          const response = await fetch(`/api/posts/${postId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              ...postData,
              author_id: userId
            })
          });
          
          console.log('Response status:', response.status);
          const responseData = await response.json();
          console.log('Response data:', responseData);
          
          if (!response.ok) {
            throw new Error(`Erreur ${response.status}: ${responseData.error || 'Erreur inconnue'}`);
          }
          
          alert('Article publié avec succès !');
          // Rediriger vers la liste des articles
          window.location.href = '/admin/blog';
        } catch (error) {
          console.error('Erreur lors de la publication:', error);
          alert('Une erreur est survenue lors de la publication: ' + error.message);
        }
      });
      
      // Test de l'événement
      console.log('Listener d\'événement postPublish configuré');
    </script>

    <!-- Informations sur l'article -->
    <div class="mt-8 bg-gray-50 rounded-lg p-6">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Informations sur l'article</h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">
        <div>
          <p class="text-gray-600">
            <span class="font-medium">Statut :</span> 
            <span class={`ml-2 px-2 py-1 rounded-full text-xs font-medium ${
              post.status === 'published' 
                ? 'bg-green-100 text-green-800' 
                : 'bg-gray-100 text-gray-800'
            }`}>
              {post.status === 'published' ? 'Publié' : 'Brouillon'}
            </span>
          </p>
          <p class="text-gray-600 mt-2">
            <span class="font-medium">Créé le :</span> 
            <span class="ml-2">{new Date(post.created_at).toLocaleDateString('fr-FR')}</span>
          </p>
          {post.published_at && (
            <p class="text-gray-600 mt-2">
              <span class="font-medium">Publié le :</span> 
              <span class="ml-2">{new Date(post.published_at).toLocaleDateString('fr-FR')}</span>
            </p>
          )}
        </div>
        <div>
          <p class="text-gray-600">
            <span class="font-medium">Slug :</span> 
            <span class="ml-2 font-mono text-xs bg-gray-200 px-2 py-1 rounded">
              {post.slug}
            </span>
          </p>
          <p class="text-gray-600 mt-2">
            <span class="font-medium">Dernière modification :</span> 
            <span class="ml-2">{new Date(post.updated_at).toLocaleDateString('fr-FR')}</span>
          </p>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

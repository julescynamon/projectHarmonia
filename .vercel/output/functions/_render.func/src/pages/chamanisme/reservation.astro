---
import MainLayout from '../../layouts/MainLayout.astro';
import { pageSEO } from '../../lib/seo';
import Button from '../../components/ui/Button.astro';
import Card from '../../components/ui/Card.astro';

const seo = {
  title: "Réserver un soin chamanique - Naima Tyzra",
  description: "Prenez rendez-vous pour un soin chamanique personnalisé : soins quantiques, communication animale, rituels de transmutation et nettoyage énergétique."
};

const services = [
  {
    id: 'soins-chamaniques-humains',
    title: 'Soin Chamanique Humain',
    duration: '1h30',
    price: '120€',
    description: 'Soin chamanique profond pour harmoniser corps, âme et esprit',
    icon: 'self_improvement'
  },
  {
    id: 'soins-chamaniques-quantiques',
    title: 'Soin Chamanique Quantique',
    duration: '2h',
    price: '150€',
    description: 'Soin chamanique quantique pour une transformation profonde de l\'être',
    icon: 'psychology'
  },
  {
    id: 'soins-chamaniques-animaux',
    title: 'Soin Chamanique Animaux',
    duration: '1h',
    price: '100€',
    description: 'Soin chamanique adapté aux besoins énergétiques de votre animal',
    icon: 'pets'
  },
  {
    id: 'communication-animale',
    title: 'Communication Animale Chamanique',
    duration: '1h',
    price: '90€',
    description: 'Communication intuitive avec votre animal de compagnie',
    icon: 'hearing'
  },
  {
    id: 'rituels-transmutation',
    title: 'Rituels de Transmutation Énergétique',
    duration: '1h30',
    price: '130€',
    description: 'Rituels sacrés pour transmuter les énergies et libérer les blocages',
    icon: 'auto_fix_high'
  },
  {
    id: 'nettoyage-energetique',
    title: 'Nettoyage Énergétique des Lieux',
    duration: '2h',
    price: '180€',
    description: 'Purification et harmonisation énergétique de votre espace de vie',
    icon: 'home'
  }
];

const timeSlots = [
  '09:00', '10:30', '12:00', '14:00', '15:30', '17:00'
];

const steps = [
  {
    title: 'Choisissez votre soin chamanique',
    description: 'Sélectionnez le type de soin chamanique qui correspond à vos besoins.',
    icon: 'assignment'
  },
  {
    title: 'Sélectionnez une date',
    description: 'Choisissez le jour qui vous convient le mieux dans le calendrier.',
    icon: 'calendar_today'
  },
  {
    title: 'Choisissez un horaire',
    description: 'Sélectionnez l\'horaire qui vous arrange parmi les créneaux disponibles.',
    icon: 'schedule'
  },
  {
    title: 'Confirmez votre rendez-vous',
    description: 'Remplissez vos informations et validez votre réservation.',
    icon: 'check_circle'
  }
];
---

<MainLayout title={seo.title} description={seo.description}>
  <div class="pt-24">
    <!-- Hero Section -->
    <section class="py-20 bg-gradient-to-b from-cream to-white relative overflow-hidden">
      <div class="absolute inset-0 bg-nature-pattern opacity-5"></div>
      
      <div class="container mx-auto px-4 relative z-10">
        <div class="max-w-4xl mx-auto text-center" data-aos="fade-up">
          <h1 class="font-heading text-4xl md:text-5xl lg:text-6xl text-ebony mb-6">
            Réserver votre soin chamanique
          </h1>
          <p class="font-slogan text-lg md:text-xl text-eucalyptus mb-8">
            Prenez rendez-vous pour un soin chamanique personnalisé et une transformation profonde de votre être.
          </p>
        </div>
      </div>
    </section>

    <!-- Étapes de réservation -->
    <section class="py-16 bg-white">
      <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
          <h2 class="font-heading text-3xl md:text-4xl text-ebony text-center mb-12">
            Comment réserver votre soin chamanique
          </h2>
          
          <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {steps.map((step, index) => (
              <Card class="text-center p-6">
                <div class="mb-4">
                  <div class="w-16 h-16 bg-gold/10 rounded-full flex items-center justify-center mx-auto mb-4">
                    <span class="text-2xl">{step.icon}</span>
                  </div>
                  <div class="w-8 h-8 bg-gold text-white rounded-full flex items-center justify-center mx-auto text-sm font-bold">
                    {index + 1}
                  </div>
                </div>
                <h3 class="font-heading text-xl text-ebony mb-3">{step.title}</h3>
                <p class="text-eucalyptus">{step.description}</p>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Services disponibles -->
    <section class="py-16 bg-cream">
      <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
          <h2 class="font-heading text-3xl md:text-4xl text-ebony text-center mb-12">
            Nos soins chamaniques disponibles
          </h2>
          
          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {services.map(service => (
              <Card class="p-6 hover:shadow-lg transition-shadow duration-300">
                <div class="mb-4">
                  <div class="w-12 h-12 bg-sage/10 rounded-lg flex items-center justify-center mb-4">
                    <span class="text-xl">{service.icon}</span>
                  </div>
                  <h3 class="font-heading text-xl text-ebony mb-2">{service.title}</h3>
                  <p class="text-eucalyptus mb-4">{service.description}</p>
                </div>
                <div class="flex justify-between items-center mb-4">
                  <span class="text-gold font-bold text-lg">{service.price}</span>
                  <span class="text-eucalyptus text-sm">{service.duration}</span>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Formulaire de réservation -->
    <section class="py-16 bg-white">
      <div class="container mx-auto px-4">
        <div class="max-w-4xl mx-auto">
          <h2 class="font-heading text-3xl md:text-4xl text-ebony text-center mb-12">
            Réserver votre créneau
          </h2>
          
          <Card class="p-8">
            <form id="appointmentForm" class="space-y-6">
              <!-- Sélection du service -->
              <div>
                <label class="block text-ebony font-medium mb-3">Choisissez votre soin chamanique</label>
                <div class="grid md:grid-cols-2 gap-4">
                  {services.map(service => (
                    <label class="flex items-center p-4 border border-sage/20 rounded-lg cursor-pointer hover:bg-sage/5 transition-colors">
                      <input type="radio" name="service" value={service.id} class="mr-3" required>
                      <div>
                        <div class="font-medium text-ebony">{service.title}</div>
                        <div class="text-sm text-eucalyptus">{service.price} - {service.duration}</div>
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              <!-- Date -->
              <div>
                <label for="date" class="block text-ebony font-medium mb-3">Date souhaitée</label>
                <input 
                  type="date" 
                  id="date" 
                  name="date" 
                  required
                  min={new Date().toISOString().split('T')[0]}
                  class="w-full p-3 border border-sage/20 rounded-lg focus:ring-2 focus:ring-gold focus:border-transparent"
                >
              </div>

              <!-- Horaires -->
              <div>
                <label class="block text-ebony font-medium mb-3">Horaire souhaité</label>
                <div class="grid grid-cols-3 md:grid-cols-6 gap-3" id="timeSlots">
                  {timeSlots.map(time => (
                    <label class="flex items-center justify-center p-3 border border-sage/20 rounded-lg cursor-pointer hover:bg-sage/5 transition-colors">
                      <input type="radio" name="time" value={time} class="mr-2" required>
                      <span class="text-sm">{time}</span>
                    </label>
                  ))}
                </div>
              </div>

              <!-- Informations personnelles -->
              <div class="grid md:grid-cols-2 gap-6">
                <div>
                  <label for="name" class="block text-ebony font-medium mb-3">Nom complet</label>
                  <input 
                    type="text" 
                    id="name" 
                    name="name" 
                    required
                    class="w-full p-3 border border-sage/20 rounded-lg focus:ring-2 focus:ring-gold focus:border-transparent"
                  >
                </div>
                <div>
                  <label for="email" class="block text-ebony font-medium mb-3">Email</label>
                  <input 
                    type="email" 
                    id="email" 
                    name="email" 
                    required
                    class="w-full p-3 border border-sage/20 rounded-lg focus:ring-2 focus:ring-gold focus:border-transparent"
                  >
                </div>
              </div>

              <div>
                <label for="reason" class="block text-ebony font-medium mb-3">Motif de consultation (optionnel)</label>
                <textarea 
                  id="reason" 
                  name="reason" 
                  rows="4"
                  placeholder="Décrivez brièvement vos besoins ou questions..."
                  class="w-full p-3 border border-sage/20 rounded-lg focus:ring-2 focus:ring-gold focus:border-transparent"
                ></textarea>
              </div>

              <div class="text-center">
                <Button type="submit" variant="primary" size="lg" class="w-full md:w-auto">
                  Confirmer ma réservation
                </Button>
              </div>
            </form>
          </Card>
        </div>
      </div>
    </section>
  </div>
</MainLayout>

<script>
  // Script de gestion du formulaire (similaire à la page rendez-vous existante)
  const form = document.getElementById('appointmentForm');
  const dateInput = document.getElementById('date');
  const timeSlots = document.getElementById('timeSlots');

  // Fonction pour vérifier la disponibilité
  async function checkAvailability(date, time) {
    try {
      const response = await fetch('/api/appointments/check-availability', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ date, time })
      });
      
      const data = await response.json();
      return data.available;
    } catch (error) {
      console.error('Erreur lors de la vérification:', error);
      return true; // En cas d'erreur, on suppose disponible
    }
  }

  // Fonction pour mettre à jour les créneaux disponibles
  async function checkTimeSlots() {
    const date = dateInput.value;
    if (!date) return;

    const timeInputs = timeSlots.querySelectorAll('input[type="radio"]');
    
    for (const input of timeInputs) {
      const time = input.value;
      const isAvailable = await checkAvailability(date, time);
      
      const label = input.parentElement;
      if (isAvailable) {
        label.classList.remove('opacity-50', 'cursor-not-allowed');
        input.disabled = false;
      } else {
        label.classList.add('opacity-50', 'cursor-not-allowed');
        input.disabled = true;
      }
    }
  }

  // Écouter les changements de date
  if (dateInput) {
    dateInput.addEventListener('change', checkTimeSlots);
  }

  // Vérifier les créneaux au chargement si une date est déjà sélectionnée
  if (dateInput && dateInput.value) {
    checkTimeSlots();
  }

  // Gestion de la soumission du formulaire
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const selectedDate = dateInput.value;
      const selectedTime = form.querySelector('input[name="time"]:checked')?.value;
      const selectedService = form.querySelector('input[name="service"]:checked')?.value;
      const clientName = form.querySelector('input[name="name"]')?.value;
      const clientEmail = form.querySelector('input[name="email"]')?.value;
      const reason = form.querySelector('textarea[name="reason"]')?.value;
      
      if (!selectedDate || !selectedTime || !selectedService || !clientName || !clientEmail) {
        alert('Veuillez remplir tous les champs du formulaire');
        return;
      }

      try {
        // Vérifier une dernière fois la disponibilité
        const isAvailable = await checkAvailability(selectedDate, selectedTime);
        
        if (!isAvailable) {
          alert('Désolé, ce créneau n\'est plus disponible. Veuillez en choisir un autre.');
          return;
        }

        // Envoyer les données à l'API
        const response = await fetch('/api/appointments/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            date: selectedDate,
            time: selectedTime,
            serviceId: selectedService,
            name: clientName,
            email: clientEmail,
            reason: reason
          })
        });

        const data = await response.json();
        
        if (response.ok && data.checkoutUrl) {
          // Rediriger vers Stripe
          window.location.href = data.checkoutUrl;
        } else {
          throw new Error(data.error || 'Erreur lors de la création du rendez-vous');
        }
      } catch (error) {
        console.error('Erreur lors de la création du rendez-vous:', error);
        alert('Une erreur est survenue. Veuillez réessayer.');
      }
    });
  }
</script>

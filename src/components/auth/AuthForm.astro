---
interface Props {
  type: 'login' | 'register';
}

const { type } = Astro.props;
---

<form class="space-y-6" data-auth-form data-type={type}>
  {type === 'register' && (
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700">Nom</label>
      <input
        type="text"
        id="name"
        name="name"
        required
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20"
      />
    </div>
  )}
  
  <div>
    <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
    <input
      type="email"
      id="email"
      name="email"
      required
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20"
    />
  </div>

  <div>
    <label for="password" class="block text-sm font-medium text-gray-700">Mot de passe</label>
    <input
      type="password"
      id="password"
      name="password"
      required
      minlength="6"
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20"
    />
  </div>

  <div class="flex items-center justify-between">
    <div class="text-sm">
      {type === 'login' ? (
        <a href="/register" class="text-primary hover:text-primary/80">
          Pas encore de compte ?
        </a>
      ) : (
        <a href="/login" class="text-primary hover:text-primary/80">
          Déjà un compte ?
        </a>
      )}
    </div>
  </div>

  <button
    type="submit"
    class="w-full bg-primary text-white px-6 py-3 rounded-full hover:bg-primary/90 transition-colors"
  >
    {type === 'login' ? 'Se connecter' : 'S\'inscrire'}
  </button>

  <div class="text-red-500 text-sm hidden" data-error></div>
</form>

<script>
  import { supabase } from '../../lib/supabase';

  function initAuthForm() {
    document.querySelectorAll('[data-auth-form]').forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formEl = e.target as HTMLFormElement;
        const type = formEl.dataset.type;
        const errorEl = formEl.querySelector('[data-error]');
        const submitButton = formEl.querySelector('button[type="submit"]') as HTMLButtonElement;
        
        const email = (formEl.querySelector('#email') as HTMLInputElement).value;
        console.log('Tentative de connexion avec email:', email);

        try {
          submitButton.disabled = true;
          
          let result;
          if (type === 'login') {
            console.log('Tentative de connexion...');
            
            result = await supabase.auth.signInWithPassword({
              email: email.trim(),
              password: (formEl.querySelector('#password') as HTMLInputElement).value.trim()
            });

            console.log('Résultat de la connexion:', result);

            if (result.error) {
              throw result.error;
            }

            if (result.data?.session) {
              console.log('Session obtenue:', result.data.session);
              
              // Attendre que la session soit complètement établie
              await supabase.auth.setSession(result.data.session);
              
              // Vérifier que la session est bien établie
              const { data: { session: currentSession } } = await supabase.auth.getSession();
              console.log('Session actuelle après setSession:', currentSession);

              if (currentSession) {
                console.log('Session établie avec succès');
                
                try {
                  // Sauvegarder le token dans un cookie accessible par le serveur
                  const token = JSON.stringify({
                    access_token: currentSession.access_token,
                    refresh_token: currentSession.refresh_token
                  });
                  
                  // Définir le cookie avec un max-age d'une heure
                  const cookieValue = `sb-hvthtebjvmutuvzvttdb-auth-token=${encodeURIComponent(token)}; path=/; max-age=3600; secure; samesite=lax`;
                  document.cookie = cookieValue;
                  
                  console.log('Cookie défini:', cookieValue);
                  console.log('Cookies actuels:', document.cookie);
                  
                  // Vérifier que le cookie est bien défini
                  const cookieExists = document.cookie.includes('sb-hvthtebjvmutuvzvttdb-auth-token');
                  console.log('Cookie existe:', cookieExists);
                  
                  if (!cookieExists) {
                    throw new Error('Le cookie n\'a pas été correctement défini');
                  }
                  
                  // Attendre un peu pour s'assurer que le cookie est bien défini
                  await new Promise(resolve => setTimeout(resolve, 100));
                  
                  console.log('Redirection...');
                  // Recharger la page pour que le middleware prenne en compte la session
                  window.location.reload();
                } catch (error) {
                  console.error('Erreur lors de la définition du cookie:', error);
                  throw error;
                }
              } else {
                throw new Error('La session n\'a pas pu être établie');
              }
            } else {
              throw new Error('Aucune session n\'a été retournée par Supabase');
            }
          }
        } catch (error) {
          console.error('Auth error:', error);
          if (errorEl) {
            errorEl.textContent = error.message === 'Invalid login credentials'
              ? 'Email ou mot de passe incorrect'
              : error.message;
            errorEl.classList.remove('hidden');
          }
        } finally {
          submitButton.disabled = false;
        }
      });
    });
  }

  // S'assurer que le code s'exécute uniquement côté client
  if (typeof window !== 'undefined') {
    initAuthForm();
  }
</script>

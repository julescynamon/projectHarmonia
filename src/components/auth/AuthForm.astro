---
interface Props {
  type: 'login' | 'register';
}

const { type } = Astro.props;
---

<form class="space-y-6" data-auth-form data-type={type}>
  {type === 'register' && (
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700">Nom</label>
      <input
        type="text"
        id="name"
        name="name"
        required
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20"
      />
    </div>
  )}
  
  <div>
    <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
    <input
      type="email"
      id="email"
      name="email"
      required
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20"
    />
  </div>

  <div>
    <label for="password" class="block text-sm font-medium text-gray-700">Mot de passe</label>
    <input
      type="password"
      id="password"
      name="password"
      required
      minlength="6"
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20"
    />
  </div>

  <div class="flex items-center justify-between">
    <div class="text-sm">
      {type === 'login' ? (
        <a href="/register" class="text-primary hover:text-primary/80">
          Pas encore de compte ?
        </a>
      ) : (
        <a href="/login" class="text-primary hover:text-primary/80">
          Déjà un compte ?
        </a>
      )}
    </div>
    {type === 'login' && (
      <div class="text-sm">
        <a href="/mot-de-passe-oublie" class="text-primary hover:text-primary/80">
          Mot de passe oublié ?
        </a>
      </div>
    )}
  </div>

  <button
    type="submit"
    class="w-full btn px-6 py-3 rounded-full hover:bg-primary/90 transition-colors"
  >
    {type === 'login' ? 'Se connecter' : 'S\'inscrire'}
  </button>

  <div class="text-red-500 text-sm hidden" data-error></div>
</form>

<script>
  import { supabase } from '../../lib/supabase';

  // Récupérer l'URL de retour depuis les paramètres de l'URL
  let returnTo = '/';
  try {
    const urlParams = new URLSearchParams(window.location.search);
    returnTo = urlParams.get('returnTo') || '/';
  } catch (e) {
    console.warn('Erreur lors de la récupération des paramètres URL:', e);
  }


  async function checkSession() {
    const { data } = await fetch('/api/auth/check-session').then(r => r.json());
    
  }

  function initAuthForm() {
    // Vérifier la session toutes les 2 secondes
    setInterval(checkSession, 2000);

    document.querySelectorAll('[data-auth-form]').forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formEl = e.target as HTMLFormElement;
        const type = formEl.dataset.type;
        const errorEl = formEl.querySelector('[data-error]');
        const submitButton = formEl.querySelector('button[type="submit"]') as HTMLButtonElement;
        
        const email = (formEl.querySelector('#email') as HTMLInputElement).value;
       

        try {
          submitButton.disabled = true;
          
          let result;
          if (type === 'login') {
            
            
            result = await supabase.auth.signInWithPassword({
              email: email.trim(),
              password: (formEl.querySelector('#password') as HTMLInputElement).value.trim()
            });
          } else if (type === 'register') {
            
            const name = (formEl.querySelector('#name') as HTMLInputElement)?.value.trim();
            
            result = await supabase.auth.signUp({
              email: email.trim(),
              password: (formEl.querySelector('#password') as HTMLInputElement).value.trim(),
              options: {
                data: {
                  name: name,
                }
              }
            });

            if (!result.error && result.data?.user) {
              // Afficher un message de succès et rediriger vers la page de connexion
              alert('Inscription réussie ! Veuillez vous connecter.');
              window.location.href = '/login';
              return;
            }
          }

          

          if (result.error) {
            throw result.error;
          }

          if (result.data?.session) {
            
            
            // Attendre que la session soit complètement établie
            await supabase.auth.setSession(result.data.session);
            
            // Vérifier que la session est bien établie
            const { data: { session: currentSession } } = await supabase.auth.getSession();
            

            if (currentSession) {
              
              
              try {
                
                
                // Vérifier la session immédiatement
                const { data: { session: currentSession } } = await supabase.auth.getSession();
                
                if (currentSession?.user) {
                  
                  
                  // Sauvegarder le token dans localStorage
                  const token = JSON.stringify({
                    access_token: currentSession.access_token,
                    refresh_token: currentSession.refresh_token
                  });
                  localStorage.setItem('supabase.auth.token', token);
                  
                  // Sauvegarder le token dans un cookie pour le serveur
                  document.cookie = `supabase.auth.token=${encodeURIComponent(token)}; path=/; max-age=${60 * 60 * 24 * 7}; secure; samesite=lax`;
                  
                  // Attendre un court instant pour que le cookie soit bien défini
                  await new Promise(resolve => setTimeout(resolve, 100));
                  
                  // Définir la destination
                  const destination = returnTo === '/' ? '/mon-compte' : returnTo;
                  
                  
                  // Forcer un rafraîchissement complet
                  window.location.replace(destination);
                } else {
                  throw new Error('Session non établie après authentification');
                }
              } catch (error) {
                console.error('Erreur lors de la définition du cookie:', error);
                throw error;
              }
            } else {
              throw new Error('La session n\'a pas pu être établie');
            }
          } else {
            throw new Error('Aucune session n\'a été retournée par Supabase');
          }
        } catch (error) {
          console.error('Auth error:', error);
          if (errorEl) {
            errorEl.textContent = error.message === 'Invalid login credentials'
              ? 'Email ou mot de passe incorrect'
              : error.message;
            errorEl.classList.remove('hidden');
          }
        } finally {
          submitButton.disabled = false;
        }
      });
    });
  }

  // S'assurer que le code s'exécute uniquement côté client
  if (typeof window !== 'undefined') {
    initAuthForm();
  }
</script>

---
// src/components/auth/AuthForm.astro
interface Props {
  type: 'login' | 'register';
}
const { type } = Astro.props;
import Button from '../ui/Button.astro';
---

<form class="space-y-6" id="auth-form" data-type={type}>
  {type === 'register' && (
    <div class="space-y-2">
      <label for="name" class="block text-ebony font-heading text-lg font-medium">Nom complet</label>
      <input
        type="text"
        id="name"
        name="name"
        required
        minlength="2"
        maxlength="100"
        class="w-full px-6 py-4 rounded-2xl border-2 border-sage/20 focus:border-eucalyptus focus:ring-2 focus:ring-eucalyptus/20 outline-none transition-all duration-300 bg-white/50 backdrop-blur-sm placeholder-gray-400"
        placeholder="Votre nom complet"
        autocomplete="name"
      />
    </div>
  )}

  <div class="space-y-2">
    <label for="email" class="block text-ebony font-heading text-lg font-medium">Adresse email</label>
    <input
      type="email"
      id="email"
      name="email"
      required
      maxlength="254"
      class="w-full px-6 py-4 rounded-2xl border-2 border-sage/20 focus:border-eucalyptus focus:ring-2 focus:ring-eucalyptus/20 outline-none transition-all duration-300 bg-white/50 backdrop-blur-sm placeholder-gray-400"
      placeholder="votre@email.com"
      autocomplete="email"
    />
  </div>

  <div class="space-y-2">
    <label for="password" class="block text-ebony font-heading text-lg font-medium">Mot de passe</label>
    <input
      type="password"
      id="password"
      name="password"
      required
      minlength="6"
      class="w-full px-6 py-4 rounded-2xl border-2 border-sage/20 focus:border-eucalyptus focus:ring-2 focus:ring-eucalyptus/20 outline-none transition-all duration-300 bg-white/50 backdrop-blur-sm placeholder-gray-400"
      placeholder="Votre mot de passe"
      autocomplete={type === 'login' ? 'current-password' : 'new-password'}
    />
    {type === 'register' && (
      <p class="text-sm text-eucalyptus/70 mt-2">
        Minimum 6 caractères
      </p>
    )}
  </div>

  <!-- Liens de navigation -->
  <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 pt-4">
    <div class="text-sm">
      {type === 'login' ? (
        <a href="/register" class="text-eucalyptus hover:text-sage transition-colors duration-300 font-medium">
          Pas encore de compte ?
        </a>
      ) : (
        <a href="/login" class="text-eucalyptus hover:text-sage transition-colors duration-300 font-medium">
          Déjà un compte ?
        </a>
      )}
    </div>
    {type === 'login' && (
      <div class="text-sm">
        <a href="/mot-de-passe-oublie" class="text-eucalyptus hover:text-sage transition-colors duration-300 font-medium">
          Mot de passe oublié ?
        </a>
      </div>
    )}
  </div>

  <!-- Bouton de soumission -->
  <div class="pt-4">
    <Button 
      type="submit" 
      variant="primary" 
      size="lg" 
      class="w-full bg-gradient-to-r from-sage to-eucalyptus hover:from-eucalyptus hover:to-sage text-white py-4 px-8 rounded-2xl transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl font-heading text-lg"
    >
      {type === 'login' ? 'Se connecter' : 'Créer mon compte'}
    </Button>
  </div>

  <!-- Message d'erreur -->
  <div class="hidden p-4 rounded-2xl text-sm bg-red-50 text-red-700 border border-red-200 shadow-lg" id="error-message">
    <div class="flex items-center gap-3">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <p class="font-medium"></p>
    </div>
  </div>
</form>

<script>
  // Script simple pour la connexion avec Supabase
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('auth-form') as HTMLFormElement;
    const errorEl = document.getElementById('error-message');
    
    if (form) {
      
      form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const formData = new FormData(form);
        const type = form.dataset.type;
        const email = formData.get('email')?.toString() || '';
        const password = formData.get('password')?.toString() || '';
        const name = formData.get('name')?.toString();
        
        
        // Masquer les erreurs précédentes
        if (errorEl) {
          errorEl.classList.add('hidden');
        }
        
        try {
          // Import dynamique de Supabase
          const { createClient } = await import('@supabase/supabase-js');
          
          // Initialiser Supabase
          const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
          const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
          
          
          // Configuration spécifique pour utiliser le stockage local
          const supabase = createClient(supabaseUrl, supabaseKey, {
            auth: {
              autoRefreshToken: true,
              persistSession: true,
              detectSessionInUrl: true,
              // Utiliser le stockage local par défaut
              storage: localStorage
            }
          });
          
          let result;
          if (type === 'login') {
            result = await supabase.auth.signInWithPassword({ email, password });
          } else if (type === 'register') {

            result = await supabase.auth.signUp({
              email, 
              password,
              options: { data: { name } }
            });
            
            if (!result.error) {
              alert('Inscription réussie ! Vous pouvez maintenant vous connecter.');
              window.location.href = '/login';
              return;
            }
          }
          
          if (result.error) {
            throw result.error;
          }
          
          const { data: { session } } = result;
          if (session) {
            
            // Créer un cookie manuellement avec le token d'accès
            const token = session.access_token;
            const expires = new Date(session.expires_at * 1000);
            document.cookie = `sb-access-token=${token}; path=/; expires=${expires.toUTCString()}`;
            
            // Créer un cookie avec la session complète (encodée)
            const sessionStr = JSON.stringify({
              access_token: session.access_token,
              refresh_token: session.refresh_token,
              expires_at: session.expires_at
            });
            document.cookie = `supabase.auth.token=${encodeURIComponent(sessionStr)}; path=/; expires=${expires.toUTCString()}`;
            
            
            // Synchroniser la session avec le serveur avant la redirection
            try {
              const syncResponse = await fetch('/api/auth/sync-session', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  session: {
                    access_token: session.access_token,
                    refresh_token: session.refresh_token,
                    expires_at: session.expires_at,
                    user: {
                      id: session.user.id,
                      email: session.user.email
                    }
                  }
                })
              });
              
              const syncResult = await syncResponse.json();
              
              // Redirection vers la page appropriée
              setTimeout(() => {
                const returnTo = new URLSearchParams(window.location.search).get('returnTo');
                window.location.href = returnTo || '/mon-compte';
              }, 500);
            } catch (syncError) {

              // Rediriger quand même
              const returnTo = new URLSearchParams(window.location.search).get('returnTo');
              window.location.href = returnTo || '/mon-compte';
            }
          } else {
            throw new Error('Session non établie après authentification.');
          }
        } catch (error) {

          if (errorEl) {
            errorEl.textContent = error.message === 'Invalid login credentials'
              ? 'Email ou mot de passe incorrect'
              : error.message;
            errorEl.classList.remove('hidden');
          }
        }
      });
    } else {

    }
  });
</script>


---
// Pas besoin de props car Supabase gère la session
---

<form class="space-y-6" data-reset-password-form>
  <div>
    <label for="password" class="block text-sm font-medium text-gray-700">Nouveau mot de passe</label>
    <input
      type="password"
      id="password"
      name="password"
      required
      minlength="6"
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20"
    />
  </div>

  <div>
    <label for="confirmPassword" class="block text-sm font-medium text-gray-700">Confirmer le mot de passe</label>
    <input
      type="password"
      id="confirmPassword"
      name="confirmPassword"
      required
      minlength="6"
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20"
    />
  </div>

  <button
    type="submit"
    class="w-full btn px-6 py-3 rounded-full hover:bg-primary/90 transition-colors"
  >
    Changer le mot de passe
  </button>

  <div class="text-red-500 text-sm hidden" data-error></div>
  <div class="text-green-500 text-sm hidden" data-success></div>
</form>

<script>
  import { supabase } from '../../lib/supabase';

  async function verifyRecoveryToken() {
    try {
      // Récupérer les paramètres du hash de l'URL
      const url = new URL(window.location.href);
      const hash = url.hash.substring(1);
      const accessToken = new URLSearchParams(hash).get('access_token');
      const refreshToken = new URLSearchParams(hash).get('refresh_token');
      const type = new URLSearchParams(hash).get('type');

      if (!accessToken || !refreshToken || type !== 'recovery') {
        console.error('Tokens manquants ou type incorrect');
        window.location.href = '/mot-de-passe-oublie?error=token_invalide';
        return;
      }

      // Définir la session avec les tokens
      const { data: { session }, error: sessionError } = await supabase.auth.setSession({
        access_token: accessToken,
        refresh_token: refreshToken
      });

      if (sessionError || !session) {
        console.error('Erreur de session:', sessionError);
        window.location.href = '/mot-de-passe-oublie?error=token_invalide';
        return;
      }

      console.log('Session établie avec succès');
    } catch (error) {
      console.error('Erreur:', error);
      window.location.href = '/mot-de-passe-oublie?error=token_invalide';
    }
  }

  function initResetPasswordForm() {
    const form = document.querySelector('[data-reset-password-form]');
    if (!form) return;

    // Vérifier le token au chargement de la page
    verifyRecoveryToken();

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formEl = e.target as HTMLFormElement;
      const errorEl = formEl.querySelector('[data-error]');
      const successEl = formEl.querySelector('[data-success]');
      const submitButton = formEl.querySelector('button[type="submit"]') as HTMLButtonElement;
      const password = (formEl.querySelector('#password') as HTMLInputElement).value;
      const confirmPassword = (formEl.querySelector('#confirmPassword') as HTMLInputElement).value;

      try {
        submitButton.disabled = true;
        errorEl.classList.add('hidden');
        successEl.classList.add('hidden');

        // Vérifier que les mots de passe correspondent
        if (password !== confirmPassword) {
          throw new Error('Les mots de passe ne correspondent pas');
        }

        // Mettre à jour le mot de passe dans Supabase
        const { error: updateError } = await supabase.auth.updateUser({
          password
        });

        if (updateError) throw updateError;

        successEl.textContent = "Votre mot de passe a été mis à jour avec succès. Redirection...";
        successEl.classList.remove('hidden');
        
        // Rediriger vers la page de connexion après 2 secondes
        setTimeout(() => {
          window.location.href = '/login';
        }, 2000);
      } catch (error) {
        console.error('Erreur:', error);
        errorEl.textContent = error.message || "Une erreur est survenue. Veuillez réessayer.";
        errorEl.classList.remove('hidden');
      } finally {
        submitButton.disabled = false;
      }
    });
  }

  // S'assurer que le code s'exécute uniquement côté client
  if (typeof window !== 'undefined') {
    initResetPasswordForm();
  }
</script>

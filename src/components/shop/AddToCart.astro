---
interface Props {
  productId: string;
  className?: string;
}

const { productId, className = '' } = Astro.props;
const session = Astro.locals.session;
---

<button
  data-product-id={productId}
  class={`add-to-cart-btn btn text-white px-8 py-3 rounded-full hover:bg-primary/90 transition-colors relative ${className}`}
  aria-label="Ajouter au panier"
>
  <span class="flex items-center justify-center gap-2">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
    </svg>
    <span>Ajouter au panier</span>
  </span>
  <div class="loading-spinner absolute inset-0 items-center justify-center" style="display: none;">
    <svg class="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  </div>
</button>

<script is:inline>
  function showError(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => toast.remove(), 3000);
  }

  function handleAddToCart(button) {
    const spinner = button.querySelector('.loading-spinner');
    const content = button.querySelector('span');
    const productId = button.getAttribute('data-product-id');
    
    const UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    
    if (!productId || !UUID_REGEX.test(productId)) {
      console.error('ID du produit invalide:', productId);
      showError('Une erreur est survenue');
      return;
    }
    
    button.disabled = true;
    spinner.style.display = 'flex';
    content.classList.add('invisible');
    
    fetch('/api/cart/add', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({ productId }),
      credentials: 'same-origin'
    })
      .then(async response => {
        console.log('Response status:', response.status);
        
        if (!response.ok) {
          if (response.status === 401) {
            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
            return;
          }
          
          const contentType = response.headers.get('content-type');
          if (contentType && contentType.includes('application/json')) {
            const data = await response.json();
            throw new Error(data.message || 'Une erreur est survenue');
          } else {
            throw new Error('Une erreur est survenue lors de la communication avec le serveur');
          }
        }
        
        // Mettre à jour le panier
        const cart = document.getElementById('cart');
        if (cart) {
          cart.classList.remove('translate-x-full');
          // Déclencher la mise à jour du compteur
          window.dispatchEvent(new CustomEvent('cart:updated'));
        }

        // Mettre à jour l'apparence du bouton
        button.classList.remove('bg-primary');
        button.classList.add('bg-green-500');
        content.textContent = 'Ajouté !';
        content.classList.remove('invisible');
        
        setTimeout(() => {
          button.classList.remove('bg-green-500');
          button.classList.add('bg-primary');
          content.textContent = 'Ajouter au panier';
          button.disabled = false;
          spinner.style.display = 'none';
        }, 2000);
      })
      .catch(error => {
        console.error('Erreur lors de l\'ajout au panier:', error);
        showError(error.message || 'Une erreur est survenue lors de l\'ajout au panier');
        button.disabled = false;
        spinner.style.display = 'none';
        content.classList.remove('invisible');
      });
  }

  // Ajouter les écouteurs d'événements
  document.querySelectorAll('.add-to-cart-btn').forEach(button => {
    button.addEventListener('click', () => handleAddToCart(button));
  });
</script>

---
import { supabase } from '../../lib/supabase';
const session = Astro.locals.session;
---

<div
  id="cart"
  class="fixed inset-y-0 right-0 w-full max-w-md bg-cart shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out z-[100]"
  style="pointer-events: auto;"
>
  <div class="h-full flex flex-col">
    <div class="p-6 border-b">
      <div class="flex items-center justify-between">
        <h2 class="text-2xl font-medium">Panier</h2>
        <button
          id="closeCart"
          class="text-gray-600 hover:text-gray-800"
          aria-label="Fermer le panier"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Message d'erreur -->
    <div id="cartError" class="invisible bg-red-50 text-red-500 p-4 text-sm">
      Une erreur est survenue
    </div>

    <!-- Indicateur de chargement -->
    <div id="cartLoading" class="invisible flex justify-center items-center p-4">
      <svg class="animate-spin h-5 w-5 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </div>

    <div class="flex-1 overflow-y-auto p-6">
      <div id="cartItems" class="space-y-6">
        <!-- Les articles du panier seront injectés ici via JavaScript -->
      </div>
      <!-- Message panier vide -->
      <div id="emptyCart" class="hidden text-center py-8 text-gray-600">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-4 text-gray-800" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
        </svg>
        <p>Votre panier est vide</p>
      </div>
    </div>

    <div class="p-6 border-t">
      <div class="flex items-center justify-between mb-4">
        <span class="text-lg font-medium">Total</span>
        <span id="cartTotal" class="text-2xl font-semibold">0,00 €</span>
      </div>
      <button
        id="checkout"
        class="w-full btn-validation text-white px-6 py-3 rounded-full hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        disabled
      >
        Valider la commande
      </button>
    </div>
  </div>
</div>

<script>
  // Éléments du DOM
  const cart = document.getElementById('cart');
  const closeCart = document.getElementById('closeCart');
  const cartItems = document.getElementById('cartItems');
  const cartTotal = document.getElementById('cartTotal');
  const checkout = document.getElementById('checkout') as HTMLButtonElement;
  const errorMessage = document.getElementById('cartError');
  const loadingIndicator = document.getElementById('cartLoading');
  const emptyCart = document.getElementById('emptyCart');

  // Fermer le panier
  if (closeCart && cart) {
    closeCart.addEventListener('click', () => {
      cart.classList.add('translate-x-full');
    });
  }

  // Fermer le panier avec Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && cart && !cart.classList.contains('translate-x-full')) {
      cart.classList.add('translate-x-full');
    }
  });

  // Fonction de mise à jour du panier
  async function updateCartDisplay() {
    try {
      setLoading(true);
      const response = await fetch('/api/cart/items');
      const { data: items, error } = await response.json();

      if (error) {
        console.error('Erreur lors de la récupération du panier:', error);
        showError('Erreur lors de la récupération du panier');
        return;
      }

      renderItems(items || []);
    } catch (error) {
      console.error('Erreur lors de la récupération du panier:', error);
      showError('Erreur lors de la récupération du panier');
    } finally {
      setLoading(false);
    }
  }

  // Écouter les mises à jour du panier
  window.addEventListener('cart:updated', updateCartDisplay);

  // Mise à jour initiale
  updateCartDisplay();

  // Mise à jour du panier
  async function updateCart() {
    if (!cartItems || !cartTotal || !emptyCart || !loadingIndicator) return;

    try {
      setLoading(true);
      errorMessage?.classList.add('hidden');
      cartItems.style.display = 'none';
      emptyCart.style.display = 'none';

      const response = await fetch('/api/cart/items');
      if (!response.ok) throw new Error('Erreur lors du chargement du panier');
      
      const data = await response.json();
      console.log('Cart: Structure complète:', JSON.stringify(data, null, 2));
      if (data?.items?.length > 0) {
        console.log('Premier item du panier:', JSON.stringify(data.items[0], null, 2));
        console.log('Produit associé:', data.items[0]?.product);
      }
      
      if (!data?.items?.length) {
        emptyCart.style.display = 'block';
        cartTotal.textContent = '0.00 €';
        if (checkout) checkout.disabled = true;
        return;
      }

      cartItems.style.display = 'block';
      renderItems(data.items);

      // Calculer le total
      const total = data.items.reduce((sum, item) => {
        return sum + (item.quantity * (item.price || 0));
      }, 0);
      cartTotal.textContent = `${total.toFixed(2)} €`;
      if (checkout) checkout.disabled = false;
    } catch (error) {
      console.error('Erreur:', error);
      showError(error.message);
    } finally {
      setLoading(false);
    }
  }

  // Fonctions utilitaires
  function showError(message) {
    errorMessage.textContent = message;
    errorMessage.classList.remove('invisible');
    setTimeout(() => errorMessage.classList.add('invisible'), 3000);
  }

  function setLoading(isLoading) {
    loadingIndicator.classList.toggle('invisible', !isLoading);
    cartItems.classList.toggle('opacity-50', isLoading);
  }

  function renderItems(items) {
    if (items.length === 0) {
      cartItems.innerHTML = '';
      emptyCart.classList.remove('hidden');
      cartTotal.textContent = '0,00 €';
      checkout.disabled = true;
      return;
    }

    emptyCart.classList.add('hidden');
    cartItems.innerHTML = items.map(item => `
      <div class="flex items-center gap-4 p-4 card rounded-lg shadow-sm">
        <div class="flex-1">
          <h3 class="font-medium text-lg">${item.title || 'Produit inconnu'}</h3>
          <p class="text-gray-600 mb-1">Fichier: ${item.image || 'Non disponible'}</p>
          <p class="text-gray-800 font-semibold">${(item.price || 0).toFixed(2)} €</p>
        </div>
        <button
          type="button"
          class="text-red-500 hover:text-red-600 p-2 transition-colors"
          data-action="remove" data-item-id="${item.id}"
          aria-label="Supprimer l'article"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
          </svg>
        </button>
      </div>
    `).join('');
    attachCartHandlers();

    const total = items.reduce((sum, item) => sum + ((item.price || 0) * item.quantity), 0);
    cartTotal.textContent = `${total.toFixed(2)} €`;
    checkout.disabled = false;
  }

  // Namespace pour les fonctions du panier
  const cartActions = {
    removeItem(itemId) {
      if (!itemId) return;
      setLoading(true);

      fetch('/api/cart/remove', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ itemId })
      })
        .then(response => {
          if (!response.ok) throw new Error('Erreur lors de la suppression');
          return updateCart();
        })
        .catch(error => {
          console.error('Erreur:', error);
          showError(error.message);
        })
        .finally(() => setLoading(false));
    },

    updateQuantity(itemId, quantity) {
      if (quantity < 1) return;
      setLoading(true);

      fetch('/api/cart/update', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ itemId, quantity })
      })
        .then(response => {
          if (!response.ok) throw new Error('Erreur lors de la mise à jour de la quantité');
          return updateCart();
        })
        .catch(error => {
          console.error('Erreur:', error);
          showError(error.message);
        })
        .finally(() => setLoading(false));
    }
  };

  // Attacher les gestionnaires d'événements aux boutons
  function attachCartHandlers() {
    const buttons = cartItems.querySelectorAll('button');
    buttons.forEach(button => {
      const action = button.getAttribute('data-action');
      const itemId = button.getAttribute('data-item-id');
      const quantity = button.getAttribute('data-quantity');

      if (action === 'remove' && itemId) {
        button.onclick = () => cartActions.removeItem(itemId);
      } else if (action === 'update' && itemId && quantity) {
        button.onclick = () => cartActions.updateQuantity(itemId, parseInt(quantity, 10));
      }
    });
  }

  // Initialisation et mise à jour du panier
  updateCart();

  // Écouter les mises à jour du panier
  window.addEventListener('cart:updated', updateCart);

  // Gestion du checkout avec Stripe
  checkout.addEventListener('click', async () => {
    try {
      // Désactiver le bouton pendant le traitement
      checkout.disabled = true;
      checkout.textContent = 'Traitement en cours...';

      // Récupérer les items du panier depuis la base de données
      console.log('Fetching cart items...');
      const cartResponse = await fetch('/api/cart/items');
      console.log('Cart response:', cartResponse);
      const cartJson = await cartResponse.json();
      console.log('Cart JSON:', cartJson);
      const { items } = cartJson;
      
      if (!items || !items.length) throw new Error('Votre panier est vide');

      // Créer la session de paiement
      const stripeResponse = await fetch('/api/create-checkout-session', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ items }),
      });

      if (!stripeResponse.ok) {
        const data = await stripeResponse.json();
        throw new Error(data.message || 'Erreur lors de la création de la session de paiement');
      }

      const { url } = await stripeResponse.json();
      if (!url) {
        throw new Error('URL de paiement non reçue');
      }

      window.location.href = url;
    } catch (error) {
      console.error('Erreur de paiement:', error);
      showError('Une erreur est survenue lors du paiement. Veuillez réessayer.');
    } finally {
      if (checkout) {
        checkout.disabled = false;
        checkout.textContent = 'Valider la commande';
      }
    }
  });
</script>

<style>
  .bg-cart { background-color: var(--color-sage); }

  .btn-validation {
    font-family: var(--font-body);
    letter-spacing: 1px;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    z-index: 0;
    background: linear-gradient(45deg, var(--color-gold), var(--color-cream));
    color: var(--color-ebony);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  /* Effet de survol lumineux */
  .btn-validation::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      120deg,
      transparent,
      rgba(255, 255, 255, 0.528),
      transparent
    );
    transform: skewX(-25deg);
    transition: all 0.5s ease;
  }

  .btn-validation:hover::before {
    left: 200%;
  }

  .btn-validation:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
  }

  .btn-validation:active {
    transform: translateY(0);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .btn-validation:focus {
    outline: none;
    box-shadow: 0 0 0 3px var(--color-sage);
    }
  
</style>
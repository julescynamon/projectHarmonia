---
import MainLayout from '../../layouts/MainLayout.astro';
import { pageSEO } from '../../lib/seo';
import Button from '../../components/ui/Button.astro';
import Card from '../../components/ui/Card.astro';

const seo = {
  title: "Réserver un accompagnement - Naima Tyzra",
  description: "Prenez rendez-vous pour un accompagnement personnalisé en naturopathie humaine et animale, soins énergétiques et suivi nutritionnel."
};

const services = [
  {
    id: 'naturopathie-humaine-premiere',
    title: 'Naturopathie Humaine – Première consultation',
    duration: '1h30-2h',
    price: '150€',
    description: 'Bilan complet et plan personnalisé pour rééquilibrer votre santé de façon naturelle et durable.',
    icon: 'eco',
    category: 'naturopathie-humaine'
  },
  {
    id: 'naturopathie-humaine-suivi',
    title: 'Naturopathie Humaine – Suivi',
    duration: '1h',
    price: '60€',
    description: 'Accompagnement régulier pour ajuster votre hygiène de vie et maintenir vos progrès.',
    icon: 'trending_up',
    category: 'naturopathie-humaine'
  },
  {
    id: 'naturopathie-animale-premiere',
    title: 'Naturopathie Animale – Première consultation',
    duration: '1h15',
    price: '80€',
    description: 'Bilan global et solutions naturelles adaptées pour améliorer la vitalité et le bien-être de votre compagnon.',
    icon: 'pets',
    category: 'naturopathie-animale'
  },
  {
    id: 'naturopathie-animale-suivi',
    title: 'Naturopathie Animale – Suivi',
    duration: '45 min',
    price: '50€',
    description: 'Suivi personnalisé pour accompagner votre animal dans la durée et ajuster son équilibre naturel.',
    icon: 'healing',
    category: 'naturopathie-animale'
  },
  {
    id: 'soins-energetiques-humains',
    title: 'Soins Énergétiques Humains',
    duration: '1h',
    price: '90€',
    description: 'Harmonisation énergétique pour libérer les blocages et retrouver paix, vitalité et équilibre.',
    icon: 'self_improvement',
    category: 'soins-energetiques'
  },
  {
    id: 'soins-energetiques-animaux',
    title: 'Soins Énergétiques Animaux',
    duration: '45 min – 1h',
    price: '50€',
    description: 'Soin énergétique adapté pour apaiser, rééquilibrer et soutenir la santé globale de votre animal.',
    icon: 'spa',
    category: 'soins-energetiques'
  },
  {
    id: 'accompagnement-personnalise',
    title: 'Accompagnement Personnalisé',
    duration: '1h',
    price: '70€',
    description: 'Séance de guidance & coaching de vie pour clarifier vos choix, dépasser vos blocages et avancer avec confiance.',
    icon: 'psychology',
    category: 'accompagnement'
  }
];

const timeSlots = [
  '09:00', '10:30', '12:00', '14:00', '15:30', '17:00'
];

const steps = [
  {
    title: 'Choisissez votre accompagnement',
    description: 'Sélectionnez le type d\'accompagnement qui correspond à vos besoins.',
    icon: 'assignment'
  },
  {
    title: 'Sélectionnez une date',
    description: 'Choisissez le jour qui vous convient le mieux dans le calendrier.',
    icon: 'calendar_today'
  },
  {
    title: 'Choisissez un horaire',
    description: 'Sélectionnez l\'horaire qui vous arrange parmi les créneaux disponibles.',
    icon: 'schedule'
  },
  {
    title: 'Confirmez votre rendez-vous',
    description: 'Remplissez vos informations et validez votre réservation.',
    icon: 'check_circle'
  }
];
---

<MainLayout title={seo.title} description={seo.description}>
  <div>
    <!-- Hero Section -->
    <section class="relative min-h-screen flex items-center justify-center overflow-hidden pb-16 hero-section">
      <!-- Background avec image et overlay -->
      <div class="absolute inset-0">
        <img 
          src="/images/heroResa.webp" 
          alt=""
          class="w-full h-full object-cover"
        />
        <div class="absolute inset-0 bg-gradient-to-r from-ebony/70 via-ebony/50 to-ebony/30"></div>
      </div>
      
      <!-- Contenu principal centré -->
      <div class="container mx-auto px-4 relative z-10 flex flex-col justify-center min-h-screen">
        <div class="max-w-4xl mx-auto text-center">
          <!-- En-tête centré -->
          <div class="motion-safe:animate-fade-in">
            <h1 class="font-heading text-4xl md:text-5xl lg:text-6xl mb-8 leading-tight text-white drop-shadow-[0_2px_8px_rgba(0,0,0,0.3)]" data-aos="fade-up" data-aos-duration="1000" data-aos-delay="600">
              Réserver votre
              <span class="block text-sage mt-10 typewriter-text text-2xl md:text-3xl lg:text-4xl" id="hero-typewriter">accompagnement personnalisé</span>
            </h1>
            
            <p class="font-body text-xl mb-10 text-white/90 leading-relaxed max-w-3xl mx-auto drop-shadow-[0_2px_4px_rgba(0,0,0,0.2)] italic" data-aos="fade-up" data-aos-duration="800" data-aos-delay="800">
              "Prenez le temps de vous occuper de vous, c'est le moment de transformer votre vie"
            </p>
          </div>
          
          <!-- Informations pratiques en petites bulles -->
          <div class="flex flex-col sm:flex-row gap-6 justify-center items-center mb-12" data-aos="fade-up" data-aos-duration="800" data-aos-delay="1000">
            <!-- Bulle 1: Format -->
            <div class="group relative overflow-hidden rounded-xl backdrop-blur-sm transition-all duration-500 hover:transform hover:scale-105 w-44 h-32">
              <div class="absolute inset-0 bg-gradient-to-br from-white/20 to-white/5 border border-white/20 rounded-xl"></div>
              <div class="relative p-6 text-center flex flex-col justify-center items-center h-full">
                <div class="bg-white/20 rounded-full w-8 h-8 flex items-center justify-center mb-4">
                  <span class="material-icons text-white text-lg">video_call</span>
                </div>
                <p class="font-heading text-lg text-white mb-3 drop-shadow-[0_2px_4px_rgba(0,0,0,0.4)] leading-tight">
                  À distance
                </p>
                <p class="text-white/90 text-xs uppercase tracking-wider font-medium leading-tight px-1">
                  Visioconférence
                </p>
              </div>
            </div>
            
            <!-- Bulle 2: Accompagnement -->
            <div class="group relative overflow-hidden rounded-xl backdrop-blur-sm transition-all duration-500 hover:transform hover:scale-105 w-44 h-32">
              <div class="absolute inset-0 bg-gradient-to-br from-white/20 to-white/5 border border-white/20 rounded-xl"></div>
              <div class="relative p-6 text-center flex flex-col justify-center items-center h-full">
                <div class="bg-white/20 rounded-full w-8 h-8 flex items-center justify-center mb-4">
                  <span class="material-icons text-white text-lg">psychology</span>
                </div>
                <p class="font-heading text-lg text-white mb-3 drop-shadow-[0_2px_4px_rgba(0,0,0,0.4)] leading-tight">
                  Personnalisé
                </p>
                <p class="text-white/90 text-xs uppercase tracking-wider font-medium leading-tight px-1">
                  Sur mesure
                </p>
              </div>
            </div>
            
            <!-- Bulle 3: Réservation -->
            <div class="group relative overflow-hidden rounded-xl backdrop-blur-sm transition-all duration-500 hover:transform hover:scale-105 w-44 h-32">
              <div class="absolute inset-0 bg-gradient-to-br from-white/20 to-white/5 border border-white/20 rounded-xl"></div>
              <div class="relative p-6 text-center flex flex-col justify-center items-center h-full">
                <div class="bg-white/20 rounded-full w-8 h-8 flex items-center justify-center mb-4">
                  <span class="material-icons text-white text-lg">schedule</span>
                </div>
                <p class="font-heading text-lg text-white mb-3 drop-shadow-[0_2px_4px_rgba(0,0,0,0.4)] leading-tight">
                  Simple
                </p>
                <p class="text-white/90 text-xs uppercase tracking-wider font-medium leading-tight px-1">
                  En quelques clics
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Étapes de réservation -->
    <section class="py-28 bg-gradient-to-br from-white via-cream to-sage/5 relative overflow-hidden">
      <!-- Éléments décoratifs en arrière-plan -->
      <div class="absolute inset-0 opacity-10">
        <div class="absolute top-20 right-10 w-2 h-2 bg-sage rounded-full animate-pulse"></div>
        <div class="absolute bottom-40 left-20 w-1 h-1 bg-gold rounded-full animate-bounce"></div>
        <div class="absolute top-1/2 right-1/4 w-3 h-3 bg-eucalyptus rounded-full animate-ping"></div>
      </div>
      
      <div class="container mx-auto px-4 relative z-10">
        <div class="max-w-6xl mx-auto">
          <!-- Titre principal -->
          <div class="text-center mb-16" data-aos="fade-up">
            <h2 class="font-heading text-4xl md:text-5xl lg:text-6xl text-ebony mb-6">
              <span class="bg-gradient-to-r from-sage via-eucalyptus to-gold bg-clip-text text-transparent">
                Comment réserver
              </span>
              <br />
              <span class="text-ebony">votre accompagnement</span>
            </h2>
            <div class="w-32 h-1 bg-gradient-to-r from-sage to-gold mx-auto rounded-full mb-8"></div>
            <p class="font-body text-xl text-ebony/80 max-w-3xl mx-auto leading-relaxed">
              Un processus simple et intuitif pour prendre rendez-vous en quelques étapes.
            </p>
          </div>
          
          <!-- Grille d'étapes -->
          <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {steps.map((step, index) => (
              <div class="group" data-aos="fade-up" data-aos-delay={200 + (index * 100)}>
                <div class="bg-white/90 backdrop-blur-sm rounded-2xl p-6 lg:p-8 shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 border border-sage/10 h-full text-center">
                  <div class="mb-6">
                    <div class="w-16 h-16 bg-gradient-to-br from-sage/20 to-eucalyptus/20 rounded-full flex items-center justify-center mx-auto mb-4">
                      <span class="material-icons text-sage text-2xl">{step.icon}</span>
                    </div>
                    <div class="w-8 h-8 bg-gradient-to-r from-sage to-gold text-white rounded-full flex items-center justify-center mx-auto text-sm font-bold">
                      {index + 1}
                    </div>
                  </div>
                  <h3 class="font-heading text-xl lg:text-2xl text-ebony mb-4">{step.title}</h3>
                  <p class="font-body text-ebony/80 leading-relaxed text-sm lg:text-base">{step.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Services disponibles -->
    <section class="py-16 bg-gradient-to-br from-cream via-white to-sage/5 relative overflow-hidden">
      <!-- Éléments décoratifs en arrière-plan -->
      <div class="absolute inset-0 opacity-10">
        <div class="absolute top-10 left-10 w-32 h-32 bg-sage rounded-full blur-3xl animate-pulse"></div>
        <div class="absolute bottom-10 right-10 w-24 h-24 bg-gold rounded-full blur-2xl animate-bounce"></div>
      </div>
      
      <div class="container mx-auto px-4 relative z-10">
        <div class="max-w-6xl mx-auto">
          <h2 class="font-heading text-3xl md:text-4xl text-ebony text-center mb-12">
            Nos accompagnements disponibles
          </h2>
          
          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {services.map(service => (
              <div class="group" data-aos="fade-up" data-aos-delay="200" id={`service-card-${service.id}`}>
                <div class="bg-white/90 backdrop-blur-sm rounded-2xl p-6 lg:p-8 shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 border border-sage/10 h-full">
                  <div class="flex items-center space-x-4 mb-4">
                    <div class="bg-gradient-to-br from-sage/20 to-eucalyptus/20 p-3 rounded-full">
                      <span class="material-icons text-sage text-2xl">{service.icon}</span>
                    </div>
                    <div class="bg-sage text-white px-3 py-1 rounded-full text-sm font-slogan uppercase tracking-wider">
                      {service.category === 'naturopathie-humaine' ? 'Humaine' : 
                       service.category === 'naturopathie-animale' ? 'Animale' : 
                       service.category === 'soins-energetiques' ? 'Énergétique' : 'Accompagnement'}
                    </div>
                  </div>
                  <h3 class="font-heading text-xl lg:text-2xl text-ebony mb-4">{service.title}</h3>
                  <p class="font-body text-ebony leading-relaxed text-sm lg:text-base mb-6">
                    {service.description}
                  </p>
                  <div class="flex justify-between items-center mb-6">
                    <span class="text-gold font-bold text-xl">{service.price}</span>
                    <span class="text-eucalyptus text-sm font-medium">⏱️ {service.duration}</span>
                  </div>
                  <Button 
                    href="#reservation-form" 
                    variant="primary" 
                    size="md" 
                    class="w-full bg-gradient-to-r from-sage to-eucalyptus hover:from-eucalyptus hover:to-sage transition-all duration-300"
                    data-service={service.id}
                  >
                    <span class="material-icons mr-2">calendar_today</span>
                    Réserver
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Formulaire de réservation -->
    <section id="reservation-form" class="py-28 bg-gradient-to-br from-cream via-white to-sage/5 relative overflow-hidden">
      <!-- Éléments décoratifs en arrière-plan -->
      <div class="absolute inset-0 opacity-10">
        <div class="absolute top-10 left-10 w-32 h-32 bg-sage rounded-full blur-3xl animate-pulse"></div>
        <div class="absolute bottom-10 right-10 w-24 h-24 bg-gold rounded-full blur-2xl animate-bounce"></div>
      </div>
      
      <div class="container mx-auto px-4 relative z-10">
        <div class="max-w-4xl mx-auto">
          <!-- Titre principal -->
          <div class="text-center mb-16" data-aos="fade-up">
            <h2 class="font-heading text-4xl md:text-5xl lg:text-6xl text-ebony mb-6">
              <span class="bg-gradient-to-r from-sage via-eucalyptus to-gold bg-clip-text text-transparent">
                Réserver votre créneau
              </span>
            </h2>
            <div class="w-32 h-1 bg-gradient-to-r from-sage to-gold mx-auto rounded-full mb-8"></div>
            <p class="font-body text-xl text-ebony/80 max-w-3xl mx-auto leading-relaxed">
              Remplissez le formulaire ci-dessous pour confirmer votre rendez-vous.
            </p>
          </div>
          
          <div class="bg-white/90 backdrop-blur-sm rounded-2xl p-8 lg:p-12 shadow-xl border border-sage/10">
            <form id="appointmentForm" class="space-y-8">
              <!-- Sélection du service -->
              <div>
                <label class="block text-ebony font-medium mb-4 text-lg">Choisissez votre accompagnement</label>
                <div class="grid md:grid-cols-2 gap-4">
                  {services.map(service => (
                    <label class="group flex items-center p-6 border-2 border-sage/20 rounded-xl cursor-pointer hover:bg-sage/5 hover:border-sage/40 transition-all duration-300 bg-white/50 backdrop-blur-sm">
                      <input type="radio" name="service" value={service.id} class="mr-4" required>
                      <div class="flex items-center space-x-4">
                        <div class="bg-gradient-to-br from-sage/20 to-eucalyptus/20 p-3 rounded-full group-hover:scale-110 transition-transform duration-300">
                          <span class="material-icons text-sage text-xl">{service.icon}</span>
                        </div>
                        <div>
                          <div class="font-heading text-lg text-ebony mb-1">{service.title}</div>
                          <div class="text-sm text-eucalyptus font-medium">{service.price} - {service.duration}</div>
                        </div>
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              <!-- Date -->
              <div>
                <label for="date" class="block text-ebony font-medium mb-4 text-lg">Date souhaitée</label>
                <input 
                  type="date" 
                  id="date" 
                  name="date" 
                  required
                  class="w-full p-4 border-2 border-sage/20 rounded-xl focus:ring-2 focus:ring-sage focus:border-sage transition-all duration-300 bg-white/50 backdrop-blur-sm"
                >
              </div>

              <!-- Horaires -->
              <div>
                <label class="block text-ebony font-medium mb-4 text-lg">Horaire souhaité</label>
                <div class="grid grid-cols-3 md:grid-cols-6 gap-4" id="timeSlots">
                  {timeSlots.map(time => (
                    <label class="group flex items-center justify-center p-4 border-2 border-sage/20 rounded-xl cursor-pointer hover:bg-sage/5 hover:border-sage/40 transition-all duration-300 bg-white/50 backdrop-blur-sm relative">
                      <input type="radio" name="time" value={time} class="mr-2" required>
                      <span class="text-sm font-medium group-hover:scale-110 transition-transform duration-300">{time}</span>
                      <div class="time-slot-status hidden absolute -top-2 -right-2 bg-red-500 text-white text-xs px-1.5 py-0.5 rounded-full shadow-sm">
                        Indisponible
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              <!-- Informations personnelles -->
              <div class="grid md:grid-cols-2 gap-6">
                <div>
                  <label for="name" class="block text-ebony font-medium mb-4 text-lg">Nom complet</label>
                  <input 
                    type="text" 
                    id="name" 
                    name="name" 
                    required
                    class="w-full p-4 border-2 border-sage/20 rounded-xl focus:ring-2 focus:ring-sage focus:border-sage transition-all duration-300 bg-white/50 backdrop-blur-sm"
                  >
                </div>
                <div>
                  <label for="email" class="block text-ebony font-medium mb-4 text-lg">Email</label>
                  <input 
                    type="email" 
                    id="email" 
                    name="email" 
                    required
                    class="w-full p-4 border-2 border-sage/20 rounded-xl focus:ring-2 focus:ring-sage focus:border-sage transition-all duration-300 bg-white/50 backdrop-blur-sm"
                  >
                </div>
              </div>

              <div>
                <label for="reason" class="block text-ebony font-medium mb-4 text-lg">Motif de consultation (optionnel)</label>
                <textarea 
                  id="reason" 
                  name="reason" 
                  rows="4"
                  placeholder="Décrivez brièvement vos besoins ou questions..."
                  class="w-full p-4 border-2 border-sage/20 rounded-xl focus:ring-2 focus:ring-sage focus:border-sage transition-all duration-300 bg-white/50 backdrop-blur-sm resize-none"
                ></textarea>
              </div>

              <div class="text-center pt-6">
                <Button 
                  type="submit" 
                  variant="primary" 
                  size="lg" 
                  class="w-full md:w-auto bg-gradient-to-r from-sage to-eucalyptus hover:from-eucalyptus hover:to-sage transition-all duration-300 transform hover:scale-105"
                >
                  <span class="material-icons mr-2">check_circle</span>
                  Confirmer ma réservation
                </Button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </section>
  </div>
</MainLayout>

<script>
  // Fonction pour logger les erreurs côté client
  function logClientError(error: any, context: string) {
    const errorData = {
      type: 'client_error',
      context,
      error: error.message || error,
      timestamp: new Date().toISOString(),
      userAgent: navigator.userAgent,
      url: window.location.href,
      referrer: document.referrer
    };
    
    console.error('Erreur client détectée:', errorData);
    
    // Ici on pourrait envoyer les erreurs à un service de monitoring
    // fetch('/api/logs/client-error', {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify(errorData)
    // }).catch(console.error);
  }

  // Définir la date minimale au chargement de la page
  document.addEventListener('DOMContentLoaded', function() {
    const dateInput = document.getElementById('date');
    if (dateInput && dateInput instanceof HTMLInputElement) {
      const today = new Date().toISOString().split('T')[0];
      dateInput.min = today;
    }
  });

  // Animation typewriter pour le hero
  function typeWriterHero(element, text, speed = 80) {
    let i = 0;
    element.innerHTML = '';
    
    function type() {
      if (i < text.length) {
        element.innerHTML += text.charAt(i);
        i++;
        setTimeout(type, speed);
      }
    }
    
    type();
  }

  // Démarrer l'animation typewriter pour le hero
  setTimeout(() => {
    const heroElement = document.getElementById('hero-typewriter');
    if (heroElement) {
      const originalText = heroElement.textContent;
      typeWriterHero(heroElement, originalText, 80);
    }
  }, 1500);
  // Script de gestion du formulaire (similaire à la page rendez-vous existante)
  const form = document.getElementById('appointmentForm');
  const dateInput = document.getElementById('date');
  const timeSlots = document.getElementById('timeSlots');

  // Fonction pour récupérer les horaires indisponibles pour une date
  async function getUnavailableTimes(date: string): Promise<string[]> {
    try {
      const response = await fetch('/api/appointments/unavailable-times', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ date })
      });
      
      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      return data.unavailableTimes || [];
    } catch (error) {
      logClientError(error, `getUnavailableTimes - date: ${date}`);
      
      // En cas d'erreur, on considère tous les créneaux comme indisponibles par sécurité
      return ['09:00', '10:30', '12:00', '14:00', '15:30', '17:00'];
    }
  }

  // Fonction pour mettre à jour les créneaux disponibles
  async function checkTimeSlots() {
    const date = dateInput.value;
    if (!date) return;

    const timeInputs = timeSlots.querySelectorAll('input[type="radio"]') as NodeListOf<HTMLInputElement>;
    
    // Afficher un indicateur de chargement
    const loadingMessage = document.createElement('div');
    loadingMessage.className = 'mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg text-blue-700 text-sm';
    loadingMessage.innerHTML = `
      <div class="flex items-center">
        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500 mr-2"></div>
        <span>Vérification de la disponibilité...</span>
      </div>
    `;
    
    // Supprimer les messages précédents
    const existingMessages = timeSlots.parentElement.querySelectorAll('.bg-red-50, .bg-blue-50, .bg-green-50');
    existingMessages.forEach(msg => msg.remove());
    
    // Ajouter le message de chargement
    timeSlots.parentElement.appendChild(loadingMessage);
    
    // Désactiver tous les créneaux pendant la vérification
    timeInputs.forEach(input => {
      input.disabled = true;
      input.checked = false;
      const label = input.parentElement;
      label.classList.add('opacity-50', 'cursor-not-allowed');
    });
    
    try {
      // Récupérer tous les horaires indisponibles en une seule requête
      const unavailableTimes = await getUnavailableTimes(date);
      

      
      let hasUnavailable = false;
      let allDisabled = true;
      
             for (const input of timeInputs) {
         const time = input.value;
         // Normaliser le format de l'heure pour la comparaison
         const normalizedTime = time + ':00';
         const isAvailable = !unavailableTimes.includes(normalizedTime);
         

         
         const label = input.parentElement;
         if (isAvailable) {
           // Créneau disponible
           label.classList.remove('opacity-50', 'cursor-not-allowed', 'bg-red-50', 'border-red-300');
           label.classList.add('cursor-pointer', 'hover:bg-sage/5', 'hover:border-sage/40');
           input.disabled = false;
           allDisabled = false;
           
           // Masquer l'indicateur d'indisponibilité
           const statusDiv = label.querySelector('.time-slot-status');
           if (statusDiv) {
             statusDiv.classList.add('hidden');
           }
         } else {
           // Créneau indisponible
           label.classList.add('opacity-50', 'cursor-not-allowed', 'bg-red-50', 'border-red-300');
           label.classList.remove('cursor-pointer', 'hover:bg-sage/5', 'hover:border-sage/40');
           input.disabled = true;
           input.checked = false;
           hasUnavailable = true;
           

           
           // Afficher l'indicateur visuel pour les créneaux indisponibles
           const statusDiv = label.querySelector('.time-slot-status');
           if (statusDiv) {
             statusDiv.classList.remove('hidden');
             statusDiv.textContent = 'Indisponible';
             statusDiv.className = 'time-slot-status absolute -top-2 -right-2 bg-red-500 text-white text-xs px-1.5 py-0.5 rounded-full shadow-sm z-10';
           }
           
           // Forcer un reflow pour s'assurer que les styles sont appliqués
           label.offsetHeight;
         }
       }
      
      // Supprimer le message de chargement
      loadingMessage.remove();
      
      // Afficher un message approprié
      if (allDisabled) {
        const errorMessage = document.createElement('div');
        errorMessage.className = 'mt-4 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm';
        errorMessage.innerHTML = `
          <div class="flex items-center">
            <span class="material-icons mr-2 text-red-500">event_busy</span>
            <span>Aucun créneau disponible pour cette date. Veuillez choisir une autre date.</span>
          </div>
        `;
        timeSlots.parentElement.appendChild(errorMessage);
      } else if (hasUnavailable) {
        const infoMessage = document.createElement('div');
        infoMessage.className = 'mt-4 p-4 bg-green-50 border border-green-200 rounded-lg text-green-700 text-sm';
        infoMessage.innerHTML = `
          <div class="flex items-center">
            <span class="material-icons mr-2 text-green-500">check_circle</span>
            <span>Créneaux disponibles mis à jour. Les créneaux grisés sont indisponibles.</span>
          </div>
        `;
        timeSlots.parentElement.appendChild(infoMessage);
      }
      
    } catch (error) {
      console.error('Erreur lors de la vérification des créneaux:', error);
      
      // Supprimer le message de chargement
      loadingMessage.remove();
      
      // Afficher un message d'erreur
      const errorMessage = document.createElement('div');
      errorMessage.className = 'mt-4 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm';
      errorMessage.innerHTML = `
        <div class="flex items-center">
          <span class="material-icons mr-2 text-red-500">warning</span>
          <span>Impossible de vérifier la disponibilité des créneaux. Veuillez réessayer ou nous contacter.</span>
        </div>
      `;
      timeSlots.parentElement.appendChild(errorMessage);
      
      // Réactiver tous les créneaux en cas d'erreur
      timeInputs.forEach(input => {
        input.disabled = false;
        const label = input.parentElement;
        label.classList.remove('opacity-50', 'cursor-not-allowed');
      });
    }
  }

  // Écouter les changements de date
  if (dateInput) {
    dateInput.addEventListener('change', checkTimeSlots);
  }

  // Vérifier les créneaux au chargement si une date est déjà sélectionnée
  if (dateInput && dateInput.value) {
    checkTimeSlots();
  }

  // Gestion de la soumission du formulaire
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const selectedDate = dateInput.value;
      const selectedTime = (form.querySelector('input[name="time"]:checked') as HTMLInputElement)?.value;
      const selectedService = (form.querySelector('input[name="service"]:checked') as HTMLInputElement)?.value;
      const clientName = (form.querySelector('input[name="name"]') as HTMLInputElement)?.value;
      const clientEmail = (form.querySelector('input[name="email"]') as HTMLInputElement)?.value;
      const reason = (form.querySelector('textarea[name="reason"]') as HTMLTextAreaElement)?.value;
      
      if (!selectedDate || !selectedTime || !selectedService || !clientName || !clientEmail) {
        alert('Veuillez remplir tous les champs du formulaire');
        return;
      }

      try {
        // Vérifier une dernière fois la disponibilité
        const unavailableTimes = await getUnavailableTimes(selectedDate);
        const isAvailable = !unavailableTimes.includes(selectedTime);
        
        if (!isAvailable) {
          alert('Désolé, ce créneau n\'est plus disponible. Veuillez en choisir un autre.');
          return;
        }

        // Envoyer les données à l'API
        const response = await fetch('/api/appointments/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            date: selectedDate,
            time: selectedTime,
            serviceId: selectedService,
            name: clientName,
            email: clientEmail,
            reason: reason
          })
        });

        const data = await response.json();
        
        if (response.ok && data.success) {
          // Afficher un message de succès
          alert('Votre demande de réservation a été enregistrée avec succès ! Vous recevrez un email de confirmation dans quelques instants.');
          
          // Rediriger vers une page de confirmation ou recharger la page
          window.location.href = '/accompagnements/reservation?success=true';
        } else {
          throw new Error(data.error || 'Erreur lors de la création du rendez-vous');
        }
      } catch (error) {
        console.error('Erreur lors de la création du rendez-vous:', error);
        alert('Une erreur est survenue. Veuillez réessayer.');
      }
    });
  }

  // Gestion du scroll et pré-sélection des services
  document.addEventListener('DOMContentLoaded', function() {
    // Écouter les clics sur les boutons "Réserver"
    const reserveButtons = document.querySelectorAll('a[href="#reservation-form"][data-service]');
    
    reserveButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        
        const serviceId = this.getAttribute('data-service');
        if (!serviceId) return;
        
        // Scroll vers le formulaire avec animation fluide
        const formSection = document.getElementById('reservation-form');
        if (formSection) {
          formSection.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
          
          // Attendre que le scroll soit terminé avant de pré-sélectionner
          setTimeout(() => {
            // Pré-sélectionner le service correspondant
            const serviceRadio = document.querySelector(`input[name="service"][value="${serviceId}"]`) as HTMLInputElement;
            if (serviceRadio) {
              serviceRadio.checked = true;
              
              // Ajouter un effet visuel pour indiquer la sélection
              const serviceLabel = serviceRadio.closest('label');
              if (serviceLabel) {
                // Retirer l'effet des autres labels
                document.querySelectorAll('input[name="service"]').forEach((radio: HTMLInputElement) => {
                  const label = radio.closest('label');
                  if (label) {
                    label.classList.remove('ring-2', 'ring-sage', 'ring-offset-2', 'bg-sage/10');
                  }
                });
                
                // Ajouter l'effet au label sélectionné
                serviceLabel.classList.add('ring-2', 'ring-sage', 'ring-offset-2', 'bg-sage/10');
                
                // Retirer l'effet après 3 secondes
                setTimeout(() => {
                  serviceLabel.classList.remove('ring-2', 'ring-sage', 'ring-offset-2', 'bg-sage/10');
                }, 3000);
              }
            }
          }, 500); // Délai pour laisser le temps au scroll de se terminer
        }
      });
    });
  });
</script>

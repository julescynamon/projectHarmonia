---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';

// Protection de la route
const supabase = Astro.locals.supabase;
const session = Astro.locals.session;

if (!session?.user?.id) {
    return Astro.redirect('/login?returnTo=/admin/boutique');
}

// Vérification du rôle admin dans la table profiles avec fallback pour l'admin principal
const { data: profile, error: profileError } = await supabase
    .from('profiles')
    .select('role')
    .eq('id', session.user.id)
    .single();

// Vérification spéciale pour l'admin principal (tyzranaima@gmail.com)
const isMainAdmin = session.user.email === 'tyzranaima@gmail.com';

if (!isMainAdmin && (profileError || !profile || profile.role !== 'admin')) {
    return Astro.redirect('/mon-compte');
}

// Récupération des produits
const { data: products } = await supabase
    .from('products')
    .select('*')
    .order('created_at', { ascending: false });

// Traiter la suppression
if (Astro.request.method === 'POST') {
    try {
        // L'authentification et la vérification du rôle admin sont déjà gérées par le middleware
        // et par la vérification au chargement de la page

        const formData = await Astro.request.formData();
        const action = formData.get('action');

        if (action === 'create') {
            // Traitement de la création de produit
            const pdfFile = formData.get('pdf');
            if (!pdfFile || !(pdfFile instanceof File)) {
                return new Response(
                    JSON.stringify({ error: 'PDF manquant ou invalide' }), 
                    { status: 400 }
                );
            }

            // S'assurer que pdfFile est bien un objet File
            if (!(pdfFile instanceof File)) {
                return new Response(
                    JSON.stringify({ error: 'PDF manquant ou invalide' }), 
                    { status: 400 }
                );
            }
            
            const pdfPath = `guides/${pdfFile.name}`;
            const pdfBuffer = await pdfFile.arrayBuffer();

            // 1. Upload du PDF
            const { error: uploadError } = await supabase.storage
                .from('pdfs')
                .upload(pdfPath, pdfBuffer, {
                    contentType: pdfFile.type,
                    cacheControl: '3600',
                    upsert: false
                });

            if (uploadError) {
                console.error('Erreur upload PDF:', uploadError);
                return new Response(
                    JSON.stringify({ error: 'Erreur lors de l\'upload du PDF' }), 
                    { status: 500 }
                );
            }

            // 2. Création du produit
            // Récupérer les valeurs du formulaire et les convertir en types appropriés
            const title = formData.get('title')?.toString() || '';
            const description = formData.get('description')?.toString() || '';
            const priceValue = formData.get('price')?.toString() || '0';
            const category = formData.get('category')?.toString() || '';
            
            const { error: insertError } = await supabase
                .from('products')
                .insert({
                    title,
                    description,
                    price: parseFloat(priceValue),
                    category,
                    pdf_path: pdfPath
                });

            if (insertError) {
                console.error('Erreur insertion produit:', insertError);
                return new Response(
                    JSON.stringify({ error: 'Erreur lors de la création du produit' }), 
                    { status: 500 }
                );
            }

            return new Response(
                JSON.stringify({ success: true }), 
                { status: 200 }
            );
        }

        // Traitement de la suppression
        const productId = formData.get('productId');



        if (!productId) {
            return new Response(
                JSON.stringify({ error: 'ID du produit manquant' }), 
                { status: 400 }
            );
        }

        // Utiliser directement la connexion serveur pour les opérations Supabase
        const { data: product, error: selectError } = await supabase
            .from('products')
            .select('pdf_path')
            .eq('id', productId)
            .single();

        if (selectError) {
            console.error('Erreur lors de la recherche du produit:', selectError);
            return new Response(
                JSON.stringify({ error: 'Produit non trouvé' }), 
                { status: 404 }
            );
        }



        if (product?.pdf_path) {
            // 2. Supprimer le PDF
            const { error: deleteStorageError } = await supabase.storage
                .from('pdfs')
                .remove([product.pdf_path]);

            if (deleteStorageError) throw deleteStorageError;
        }

        // 3. Supprimer le produit
        const { error: deleteError } = await supabase
            .from('products')
            .delete()
            .eq('id', productId);

        if (deleteError) throw deleteError;

        return new Response(JSON.stringify({ success: true }));
    } catch (error) {
        return new Response(JSON.stringify({ error: error.message }), { status: 500 });
    }
}
---

<Layout title="Administration de la boutique | La Maison Sattvaïa">
    <main class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-sage mb-8">Administration de la boutique</h1>
        
        <!-- Formulaire d'ajout de produit -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Ajouter un nouveau produit</h2>
            <form id="productForm" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Titre</label>
                        <input type="text" name="title" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-sage focus:ring-sage">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Catégorie</label>
                        <input type="text" name="category" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-sage focus:ring-sage">
                    </div>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Description</label>
                    <textarea name="description" required rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-sage focus:ring-sage"></textarea>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Prix (€)</label>
                        <input type="number" name="price" required step="0.01" min="0" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-sage focus:ring-sage">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">PDF</label>
                        <input type="file" name="pdf" required accept=".pdf" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-sage/10 file:text-sage hover:file:bg-sage/20">
                    </div>
                </div>
                <div class="flex justify-end">
                    <button type="submit" class="bg-sage text-white px-4 py-2 rounded-md hover:bg-sage/90 transition-colors">
                        Ajouter le produit
                    </button>
                </div>
            </form>
        </div>

        <!-- Liste des produits -->
        <div class="bg-white rounded-lg shadow-sm p-6">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Produits existants</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Titre</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Catégorie</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Prix</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">PDF</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        {products?.map((product) => (
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{product.title}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{product.category}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{product.price.toFixed(2)} €</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {product.pdf_path ? (
                                        <span class="text-green-600">✓</span>
                                    ) : (
                                        <span class="text-red-600">✗</span>
                                    )}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    <button 
                                        data-product-id={product.id}
                                        class="text-red-600 hover:text-red-900 delete-product">
                                        Supprimer
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    </main>
</Layout>

<script>
    const deleteButtons = document.querySelectorAll('.delete-product');
    const productForm = document.getElementById('productForm');

    productForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.currentTarget;
        if (!(form instanceof HTMLFormElement)) return;
        const formData = new FormData(form);
        formData.append('action', 'create');
        
        try {
            const response = await fetch('/admin/boutique', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                const result = await response.json();
                throw new Error(result.error || 'Une erreur est survenue');
            }

            // Rechargement de la page
            window.location.reload();
        } catch (error) {
            console.error('Erreur:', error);
            alert(`Une erreur est survenue lors de l'ajout du produit: ${error.message}`);
        }
    });

    deleteButtons.forEach(button => {
        button.addEventListener('click', async () => {
            if (!confirm('Êtes-vous sûr de vouloir supprimer ce produit ?')) return;

            const productId = button.getAttribute('data-product-id');
            if (!productId) return;
            
            try {
                const formData = new FormData();
                formData.append('productId', productId);
                
                const response = await fetch('/admin/boutique', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const result = await response.json();
                    throw new Error(result.error || 'Une erreur est survenue');
                }

                // Rechargement de la page
                window.location.reload();
            } catch (error) {
                console.error('Erreur:', error);
                alert('Une erreur est survenue lors de la suppression du produit.');
            }
        });
    });
</script>

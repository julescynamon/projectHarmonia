---
export const prerender = false;

import MainLayout from '../../layouts/MainLayout.astro';
import Card from '../../components/ui/Card.astro';

// V√©rification suppl√©mentaire en plus du middleware
const supabase = Astro.locals.supabase;
const session = Astro.locals.session;

// La v√©rification admin est d√©j√† g√©r√©e par le middleware, mais nous ajoutons
// une v√©rification explicite pour plus de coh√©rence et de s√©curit√©
if (!session?.user?.id) {
  return Astro.redirect('/login?returnTo=/admin/disponibilites');
}

// V√©rification du r√¥le admin avec fallback pour l'admin principal
const { data: profile, error: profileError } = await supabase
  .from('profiles')
  .select('role')
  .eq('id', session.user.id)
  .single();

// V√©rification sp√©ciale pour l'admin principal (tyzranaima@gmail.com)
const isMainAdmin = session.user.email === 'tyzranaima@gmail.com';

if (!isMainAdmin && (profileError || !profile || profile.role !== 'admin')) {
  return Astro.redirect('/mon-compte');
}
---

<MainLayout title="Gestion des disponibilit√©s" description="G√©rez vos disponibilit√©s et r√©servations">
  <div class="pt-24">
    <section class="py-20 bg-sage/5">
      <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
          <Card variant="hover">
            <div class="p-8">
              <h1 class="font-heading text-3xl text-ebony mb-8">Gestion des disponibilit√©s et r√©servations</h1>
              
              <!-- Navigation par onglets -->
              <div class="mb-8">
                <div class="border-b border-sage/20">
                  <nav class="-mb-px flex space-x-8">
                    <button id="tab-appointments" class="tab-button active py-2 px-1 border-b-2 border-sage text-sage font-medium">
                      üìã Demandes en attente
                    </button>
                    <button id="tab-availability" class="tab-button py-2 px-1 border-b-2 border-transparent text-ebony/60 hover:text-ebony font-medium">
                      üìÖ P√©riodes bloqu√©es
                    </button>
                  </nav>
                </div>
              </div>

              <!-- Onglet Demandes en attente -->
              <div id="appointments-tab" class="tab-content">
                <div class="mb-6">
                  <h2 class="font-heading text-2xl text-ebony mb-4">Demandes de r√©servation en attente</h2>
                  
                  <!-- Filtres -->
                  <div class="bg-white/50 rounded-lg p-4 mb-6">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div>
                        <label class="block text-sm font-medium text-ebony mb-2">Statut</label>
                        <select id="status-filter" class="w-full px-3 py-2 rounded-lg border border-sage/20 text-sm">
                          <option value="">Tous les statuts</option>
                          <option value="pending_approval">En attente d'approbation</option>
                          <option value="pending">En attente de paiement</option>
                          <option value="confirmed">Confirm√©</option>
                          <option value="refused">Refus√©</option>
                        </select>
                      </div>
                      <div>
                        <label class="block text-sm font-medium text-ebony mb-2">Date de d√©but</label>
                        <input type="date" id="date-from-filter" class="w-full px-3 py-2 rounded-lg border border-sage/20 text-sm">
                      </div>
                      <div>
                        <label class="block text-sm font-medium text-ebony mb-2">Date de fin</label>
                        <input type="date" id="date-to-filter" class="w-full px-3 py-2 rounded-lg border border-sage/20 text-sm">
                      </div>
                      <div>
                        <label class="block text-sm font-medium text-ebony mb-2">Recherche client</label>
                        <input type="text" id="client-search" placeholder="Nom ou email..." class="w-full px-3 py-2 rounded-lg border border-sage/20 text-sm">
                      </div>
                    </div>
                    <div class="mt-4 flex justify-between items-center">
                      <button id="apply-filters" class="bg-sage text-white px-4 py-2 rounded-lg hover:bg-sage/90 transition-colors text-sm">
                        üîç Appliquer les filtres
                      </button>
                      <button id="clear-filters" class="text-sage hover:text-sage/80 transition-colors text-sm">
                        ‚ú® Effacer les filtres
                      </button>
                    </div>
                  </div>

                  <!-- Liste des r√©servations -->
                  <div id="appointments-list" class="space-y-4">
                    <!-- Les r√©servations seront charg√©es ici -->
                  </div>

                  <!-- Pagination -->
                  <div id="pagination" class="mt-6 flex justify-center items-center space-x-2">
                    <!-- La pagination sera g√©n√©r√©e ici -->
                  </div>
                </div>
              </div>

              <!-- Onglet P√©riodes bloqu√©es -->
              <div id="availability-tab" class="tab-content hidden">
              
              <div id="calendar-manager" class="space-y-6">
                <!-- Le calendrier sera inject√© ici par le JavaScript -->
              </div>

                <h2 class="font-heading text-2xl text-ebony mb-4">Bloquer une plage horaire</h2>
                <form id="block-time-form" class="space-y-4">
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label class="block text-sm font-medium text-ebony mb-2">Date de d√©but</label>
                      <input type="date" name="startDate" id="startDate" class="w-full px-4 py-2 rounded-lg border border-sage/20" required>
                    </div>
                    <div>
                      <label class="block text-sm font-medium text-ebony mb-2">Date de fin</label>
                      <input type="date" name="endDate" id="endDate" class="w-full px-4 py-2 rounded-lg border border-sage/20" required>
                    </div>
                    <div>
                      <label class="block text-sm font-medium text-ebony mb-2">Heure de d√©but</label>
                      <input type="time" name="startTime" class="w-full px-4 py-2 rounded-lg border border-sage/20" required>
                    </div>
                    <div>
                      <label class="block text-sm font-medium text-ebony mb-2">Heure de fin</label>
                      <input type="time" name="endTime" class="w-full px-4 py-2 rounded-lg border border-sage/20" required>
                    </div>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-ebony mb-2">Raison</label>
                    <input type="text" name="reason" class="w-full px-4 py-2 rounded-lg border border-sage/20" placeholder="Optionnel">
                  </div>
                  <button type="submit" class="bg-eucalyptus text-white px-6 py-2 rounded-lg hover:bg-eucalyptus/90 transition-colors">
                    Bloquer cette plage
                  </button>
                </form>

                <!-- S√©parateur -->
                <div class="my-8 border-t border-sage/20"></div>

                <!-- Formulaire pour bloquer des jours entiers (vacances) -->
                <h2 class="font-heading text-2xl text-ebony mb-4">Bloquer des jours entiers (Vacances)</h2>
                <form id="block-day-form" class="space-y-4">
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label class="block text-sm font-medium text-ebony mb-2">Date de d√©but</label>
                      <input type="date" name="startDate" id="vacationStartDate" class="w-full px-4 py-2 rounded-lg border border-sage/20" required>
                    </div>
                    <div>
                      <label class="block text-sm font-medium text-ebony mb-2">Date de fin</label>
                      <input type="date" name="endDate" id="vacationEndDate" class="w-full px-4 py-2 rounded-lg border border-sage/20" required>
                    </div>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-ebony mb-2">Raison (ex: Vacances, Cong√©s, etc.)</label>
                    <input type="text" name="reason" class="w-full px-4 py-2 rounded-lg border border-sage/20" placeholder="Vacances d'√©t√©" required>
                  </div>
                  <button type="submit" class="bg-orange-500 text-white px-6 py-2 rounded-lg hover:bg-orange-600 transition-colors">
                    üèñÔ∏è Bloquer ces jours (Vacances)
                  </button>
                </form>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </section>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </section>
  </div>
</MainLayout>

<script>
  import { createClient } from '@supabase/supabase-js';
  
  // Initialisation du client Supabase c√¥t√© client
  const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
  const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
  const supabaseClient = createClient(supabaseUrl, supabaseKey);

  // Variables globales
  let currentPage = 1;
  let currentFilters: {
    status?: string;
    dateFrom?: string;
    dateTo?: string;
    client?: string;
  } = {};

  // Gestion des onglets
  function initTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetId = button.id.replace('tab-', '') + '-tab';
        
        // Mettre √† jour les boutons
        tabButtons.forEach(btn => {
          btn.classList.remove('active', 'border-sage', 'text-sage');
          btn.classList.add('border-transparent', 'text-ebony/60');
        });
        button.classList.add('active', 'border-sage', 'text-sage');
        button.classList.remove('border-transparent', 'text-ebony/60');
        
        // Afficher le contenu correspondant
        tabContents.forEach(content => {
          content.classList.add('hidden');
        });
        document.getElementById(targetId).classList.remove('hidden');
        
        // Charger les donn√©es si n√©cessaire
        if (targetId === 'appointments-tab') {
          (window as any).loadAppointments();
        } else if (targetId === 'availability-tab') {
          (window as any).loadBlockedTimes();
        }
      });
    });
  }

  // Fonction pour charger les r√©servations
  (window as any).loadAppointments = async function(page = 1) {
    try {
      const appointmentsList = document.getElementById('appointments-list');
      appointmentsList.innerHTML = '<div class="text-center py-8"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-sage mx-auto"></div><p class="mt-2 text-ebony/60">Chargement...</p></div>';

      // Construire les param√®tres de requ√™te
      const params = new URLSearchParams({
        page: page.toString(),
        limit: '10'
      });

      if (currentFilters.status) params.append('status', currentFilters.status);
      if (currentFilters.dateFrom) params.append('dateFrom', currentFilters.dateFrom);
      if (currentFilters.dateTo) params.append('dateTo', currentFilters.dateTo);
      if (currentFilters.client) params.append('client', currentFilters.client);

      const response = await fetch(`/api/admin/appointments/list?${params}`);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Erreur lors du chargement');
      }

      displayAppointments(data.data, data.pagination);
    } catch (error) {
      console.error('Erreur lors du chargement des r√©servations:', error);
      document.getElementById('appointments-list').innerHTML = 
        '<div class="text-center py-8 text-red-600">Erreur lors du chargement des r√©servations</div>';
    }
  }

  // Fonction pour afficher les r√©servations
  function displayAppointments(appointments, pagination) {
    const appointmentsList = document.getElementById('appointments-list');
    
    if (!appointments || appointments.length === 0) {
      appointmentsList.innerHTML = '<div class="text-center py-8 text-ebony/60">Aucune r√©servation trouv√©e</div>';
      return;
    }

    const appointmentsHtml = appointments.map(appointment => {
      const statusBadge = getStatusBadge(appointment.status);
      const formattedDate = new Date(appointment.date).toLocaleDateString('fr-FR');
      
      return `
        <div class="bg-white/80 rounded-lg p-6 border border-sage/10 hover:shadow-lg transition-shadow">
          <div class="flex justify-between items-start mb-4">
            <div>
              <h3 class="font-heading text-lg text-ebony mb-2">${appointment.client_name}</h3>
              <p class="text-ebony/60 text-sm">${appointment.client_email}</p>
            </div>
            <div class="text-right">
              ${statusBadge}
              <p class="text-xs text-ebony/40 mt-1">ID: ${appointment.id.slice(0, 8)}...</p>
            </div>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
              <span class="text-sm font-medium text-ebony/60">Service:</span>
              <p class="text-ebony">${appointment.services?.title || 'N/A'}</p>
            </div>
            <div>
              <span class="text-sm font-medium text-ebony/60">Date:</span>
              <p class="text-ebony">${formattedDate} √† ${appointment.time}</p>
            </div>
            <div>
              <span class="text-sm font-medium text-ebony/60">Prix:</span>
              <p class="text-ebony">${appointment.services?.price || 'N/A'}‚Ç¨</p>
            </div>
          </div>
          
          ${appointment.reason ? `
            <div class="mb-4">
              <span class="text-sm font-medium text-ebony/60">Motif:</span>
              <p class="text-ebony text-sm">${appointment.reason}</p>
            </div>
          ` : ''}
          
          <div class="flex justify-end space-x-2">
            ${appointment.status === 'pending_approval' ? `
              <button onclick="approveAppointment('${appointment.id}')" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors text-sm">
                ‚úÖ Approuver
              </button>
              <button onclick="rejectAppointment('${appointment.id}')" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors text-sm">
                ‚ùå Refuser
              </button>
            ` : ''}
            ${appointment.status === 'pending' ? `
              <span class="text-orange-600 text-sm font-medium">‚è≥ En attente de paiement</span>
            ` : ''}
            ${appointment.status === 'confirmed' ? `
              <span class="text-green-600 text-sm font-medium">‚úÖ Confirm√©</span>
            ` : ''}
            ${appointment.status === 'refused' ? `
              <span class="text-red-600 text-sm font-medium">‚ùå Refus√©</span>
            ` : ''}
          </div>
        </div>
      `;
    }).join('');

    appointmentsList.innerHTML = appointmentsHtml;
    displayPagination(pagination);
  }

  // Fonction pour obtenir le badge de statut
  function getStatusBadge(status) {
    const badges = {
      'pending_approval': '<span class="bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs font-medium">‚è≥ En attente</span>',
      'pending': '<span class="bg-orange-100 text-orange-800 px-2 py-1 rounded-full text-xs font-medium">üí≥ En attente de paiement</span>',
      'confirmed': '<span class="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">‚úÖ Confirm√©</span>',
      'refused': '<span class="bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs font-medium">‚ùå Refus√©</span>',
      'cancelled': '<span class="bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-xs font-medium">üö´ Annul√©</span>'
    };
    return badges[status] || '<span class="bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-xs font-medium">‚ùì Inconnu</span>';
  }

  // Fonction pour afficher la pagination
  function displayPagination(pagination) {
    const paginationContainer = document.getElementById('pagination');
    
    if (!pagination || pagination.totalPages <= 1) {
      paginationContainer.innerHTML = '';
      return;
    }

    let paginationHtml = '';
    
    // Bouton pr√©c√©dent
    if (pagination.hasPrevPage) {
      paginationHtml += `<button onclick="loadAppointments(${pagination.page - 1})" class="px-3 py-2 text-sage hover:text-sage/80 transition-colors">‚Üê Pr√©c√©dent</button>`;
    }
    
    // Pages
    for (let i = 1; i <= pagination.totalPages; i++) {
      if (i === pagination.page) {
        paginationHtml += `<span class="px-3 py-2 bg-sage text-white rounded-lg">${i}</span>`;
      } else {
        paginationHtml += `<button onclick="loadAppointments(${i})" class="px-3 py-2 text-ebony/60 hover:text-ebony transition-colors">${i}</button>`;
      }
    }
    
    // Bouton suivant
    if (pagination.hasNextPage) {
      paginationHtml += `<button onclick="loadAppointments(${pagination.page + 1})" class="px-3 py-2 text-sage hover:text-sage/80 transition-colors">Suivant ‚Üí</button>`;
    }
    
    paginationContainer.innerHTML = paginationHtml;
  }

  // Fonction pour approuver une r√©servation
  (window as any).approveAppointment = async (appointmentId) => {
    if (!confirm('√ätes-vous s√ªr de vouloir approuver cette r√©servation ?')) return;
    
    try {
      const response = await fetch('/api/admin/appointments/approve', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ appointmentId })
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Erreur lors de l\'approbation');
      }

      alert('R√©servation approuv√©e avec succ√®s ! Un email avec le lien de paiement a √©t√© envoy√© au client.');
      (window as any).loadAppointments(currentPage);
    } catch (error) {
      console.error('Erreur lors de l\'approbation:', error);
      alert('Erreur lors de l\'approbation : ' + error.message);
    }
  };

  // Fonction pour refuser une r√©servation
  (window as any).rejectAppointment = async (appointmentId) => {
    const rejectionReason = prompt('Veuillez indiquer la raison du refus :');
    if (!rejectionReason) return;
    
    if (!confirm('√ätes-vous s√ªr de vouloir refuser cette r√©servation ?')) return;
    
    try {
      const response = await fetch('/api/admin/appointments/reject', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          appointmentId, 
          rejectionReason 
        })
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Erreur lors du refus');
      }

      alert('R√©servation refus√©e avec succ√®s ! Un email a √©t√© envoy√© au client.');
      (window as any).loadAppointments(currentPage);
    } catch (error) {
      console.error('Erreur lors du refus:', error);
      alert('Erreur lors du refus : ' + error.message);
    }
  };

  // Gestion des filtres
  function initFilters() {
    const applyFiltersBtn = document.getElementById('apply-filters');
    const clearFiltersBtn = document.getElementById('clear-filters');
    
    applyFiltersBtn.addEventListener('click', () => {
      currentFilters = {
        status: document.getElementById('status-filter').value,
        dateFrom: document.getElementById('date-from-filter').value,
        dateTo: document.getElementById('date-to-filter').value,
        client: document.getElementById('client-search').value
      };
      currentPage = 1;
      (window as any).loadAppointments(currentPage);
    });
    
    clearFiltersBtn.addEventListener('click', () => {
      document.getElementById('status-filter').value = '';
      document.getElementById('date-from-filter').value = '';
      document.getElementById('date-to-filter').value = '';
      document.getElementById('client-search').value = '';
      currentFilters = {};
      currentPage = 1;
      (window as any).loadAppointments(currentPage);
    });
  }

  // D√©finir la date minimale (aujourd'hui)
  const today = new Date().toISOString().split('T')[0];
  
  // Initialiser les champs de date avec la date minimale
  document.addEventListener('DOMContentLoaded', function() {
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    
    if (startDateInput) {
      startDateInput.min = today;
      startDateInput.addEventListener('change', function() {
        // Mettre √† jour la date minimale de fin
        if (endDateInput) {
          endDateInput.min = this.value;
        }
      });
    }
    
    if (endDateInput) {
      endDateInput.min = today;
    }
  });

  // Fonction pour v√©rifier les chevauchements c√¥t√© client
  async function checkOverlaps(startDate, endDate, startTime, endTime) {
    try {
      const { data: existingBlocks, error } = await supabaseClient
        .from('blocked_times')
        .select('*')
        .or(`start_date.lte.${endDate},end_date.gte.${startDate}`);

      if (error) throw error;

      if (existingBlocks && existingBlocks.length > 0) {
        // V√©rifier les chevauchements temporels
        for (const block of existingBlocks) {
          const newStart = new Date(`${startDate} ${startTime}`);
          const newEnd = new Date(`${endDate} ${endTime}`);
          const existingStart = new Date(`${block.start_date} ${block.start_time}`);
          const existingEnd = new Date(`${block.end_date} ${block.end_time}`);

          // V√©rifier si les plages se chevauchent
          if (newStart < existingEnd && newEnd > existingStart) {
            return {
              hasOverlap: true,
              conflictingBlock: block
            };
          }
        }
      }

      return { hasOverlap: false };
    } catch (error) {
      console.error('Erreur lors de la v√©rification des chevauchements:', error);
      throw error;
    }
  }

  // Gestion du formulaire de blocage
  const form = document.getElementById('block-time-form') as HTMLFormElement;
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    
    try {
      // R√©cup√©rer les valeurs du formulaire
      const startDate = formData.get('startDate');
      const endDate = formData.get('endDate');
      const startTime = formData.get('startTime');
      const endTime = formData.get('endTime');
      
      // Validation c√¥t√© client
      const startDateTime = new Date(`${startDate} ${startTime}`);
      const endDateTime = new Date(`${endDate} ${endTime}`);
      const now = new Date();
      
      // V√©rifier que les dates sont futures
      if (startDateTime <= now) {
        throw new Error('La date de d√©but doit √™tre dans le futur');
      }
      
      if (endDateTime <= now) {
        throw new Error('La date de fin doit √™tre dans le futur');
      }
      
      // V√©rifier que la date de fin est post√©rieure √† la date de d√©but
      if (startDateTime >= endDateTime) {
        throw new Error('La date de fin doit √™tre post√©rieure √† la date de d√©but');
      }
      
      // V√©rifier les chevauchements
      const overlapCheck = await checkOverlaps(startDate, endDate, startTime, endTime);
      if (overlapCheck.hasOverlap) {
        const conflicting = overlapCheck.conflictingBlock;
        throw new Error(`Cette plage chevauche une p√©riode d√©j√† bloqu√©e (du ${conflicting.start_date} ${conflicting.start_time} au ${conflicting.end_date} ${conflicting.end_time})`);
      }
      
      // Ins√©rer la nouvelle plage bloqu√©e
      const { data, error } = await supabaseClient
        .from('blocked_times')
        .insert([
          {
            start_date: startDate,
            end_date: endDate,
            start_time: startTime,
            end_time: endTime,
            reason: formData.get('reason') || null
          }
        ])
        .select();

      if (error) {
        console.error('Erreur Supabase:', error);
        throw error;
      }
      
      alert('Plage horaire bloqu√©e avec succ√®s');
      form.reset();
      
      // R√©initialiser les dates minimales
      const startDateInput = document.getElementById('startDate');
      const endDateInput = document.getElementById('endDate');
      if (startDateInput) startDateInput.min = today;
      if (endDateInput) endDateInput.min = today;
      
      await (window as any).loadBlockedTimes(); // Recharger l'affichage
    } catch (error) {
      console.error('Erreur:', error);
      alert(error instanceof Error ? error.message : 'Erreur lors du blocage de la plage horaire');
    }
  });

  // Gestion du formulaire de blocage de jours entiers (vacances)
  const vacationForm = document.getElementById('block-day-form') as HTMLFormElement;
  vacationForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(vacationForm);
    
    try {
      // R√©cup√©rer les valeurs du formulaire
      const startDate = formData.get('startDate');
      const endDate = formData.get('endDate');
      const reason = formData.get('reason');
      
      // Validation c√¥t√© client
      const startDateTime = new Date(startDate as string);
      const endDateTime = new Date(endDate as string);
      const now = new Date();
      
      // V√©rifier que les dates sont futures
      if (startDateTime <= now) {
        throw new Error('La date de d√©but doit √™tre dans le futur');
      }
      
      if (endDateTime <= now) {
        throw new Error('La date de fin doit √™tre dans le futur');
      }
      
      // V√©rifier que la date de fin est post√©rieure √† la date de d√©but
      if (startDateTime >= endDateTime) {
        throw new Error('La date de fin doit √™tre post√©rieure √† la date de d√©but');
      }
      
      // V√©rifier les chevauchements pour les jours entiers
      const { data: existingBlocks, error: overlapError } = await supabaseClient
        .from('blocked_times')
        .select('*')
        .or(`start_date.lte.${endDate},end_date.gte.${startDate}`);

      if (overlapError) throw overlapError;

      if (existingBlocks && existingBlocks.length > 0) {
        // V√©rifier les chevauchements de dates
        for (const block of existingBlocks) {
          const blockStart = new Date(block.start_date);
          const blockEnd = new Date(block.end_date);
          
          if (startDateTime <= blockEnd && endDateTime >= blockStart) {
            throw new Error(`Cette p√©riode chevauche une p√©riode d√©j√† bloqu√©e (du ${block.start_date} au ${block.end_date})`);
          }
        }
      }
      
      // Ins√©rer le blocage de jours entiers
      const { data, error } = await supabaseClient
        .from('blocked_times')
        .insert([
          {
            start_date: startDate,
            end_date: endDate,
            start_time: '00:00', // Journ√©e enti√®re
            end_time: '23:59',   // Journ√©e enti√®re
            reason: reason || 'Vacances'
          }
        ])
        .select();

      if (error) {
        console.error('Erreur Supabase:', error);
        throw error;
      }
      
      alert(`P√©riode de vacances bloqu√©e avec succ√®s du ${startDate} au ${endDate}`);
      vacationForm.reset();
      
      // R√©initialiser les dates minimales
      const vacationStartInput = document.getElementById('vacationStartDate');
      const vacationEndInput = document.getElementById('vacationEndDate');
      if (vacationStartInput) vacationStartInput.min = today;
      if (vacationEndInput) vacationEndInput.min = today;
      
      await (window as any).loadBlockedTimes(); // Recharger l'affichage
    } catch (error) {
      console.error('Erreur:', error);
      alert(error instanceof Error ? error.message : 'Erreur lors du blocage de la p√©riode de vacances');
    }
  });

  // Charger et afficher les plages bloqu√©es
  (window as any).loadBlockedTimes = async function() {
    try {
      const { data, error } = await supabaseClient
        .from('blocked_times')
        .select('*')
        .order('start_date', { ascending: true });

      if (error) {
        console.error('Erreur lors du chargement des disponibilit√©s:', error);
        return;
      }

      // Mettre √† jour l'affichage
      const calendar = document.getElementById('calendar-manager');
      if (!calendar || !data) return;
      
      calendar.innerHTML = `
        <div class="space-y-4">
          <h2 class="font-heading text-2xl text-ebony mb-4">P√©riodes bloqu√©es</h2>
          ${data.length === 0 ? 
            '<p class="text-sage">Aucune p√©riode bloqu√©e</p>' :
            `<div class="grid gap-4">
              ${data.map(period => {
                const isFullDay = period.start_time === '00:00' && period.end_time === '23:59';
                const badgeClass = isFullDay ? 'bg-orange-100 text-orange-800' : 'bg-sage/10 text-sage';
                const badgeText = isFullDay ? 'üèñÔ∏è Vacances' : '‚è∞ Cr√©neau';
                
                return `
                  <div class="p-4 ${isFullDay ? 'bg-orange-50 border border-orange-200' : 'bg-sage/5'} rounded-lg">
                    <div class="flex justify-between items-start">
                      <div class="flex-1">
                        <div class="flex items-center gap-2 mb-2">
                          <span class="px-2 py-1 rounded-full text-xs font-medium ${badgeClass}">${badgeText}</span>
                        </div>
                        <p class="font-medium">Du ${new Date(period.start_date).toLocaleDateString()} ${isFullDay ? '' : `√† ${period.start_time}`}</p>
                        <p class="font-medium">Au ${new Date(period.end_date).toLocaleDateString()} ${isFullDay ? '' : `√† ${period.end_time}`}</p>
                        ${period.reason ? `<p class="text-sage mt-2 font-medium">${period.reason}</p>` : ''}
                      </div>
                      <button 
                        class="text-red-500 hover:text-red-700 transition-colors ml-4"
                        onclick="deletePeriod('${period.id}')"
                        title="Supprimer cette p√©riode"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                `;
              }).join('')}
            </div>`
          }
        </div>
      `;
    } catch (error) {
      console.error('Erreur:', error);
      alert('Erreur lors du chargement des p√©riodes bloqu√©es');
    }
  }

  // Fonction de suppression
  window.deletePeriod = async (id) => {
    if (!confirm('Voulez-vous vraiment supprimer cette p√©riode ?')) return;
    
    try {
      const { error } = await supabaseClient
        .from('blocked_times')
        .delete()
        .eq('id', id);

      if (error) throw error;
      
      alert('P√©riode supprim√©e avec succ√®s');
      await (window as any).loadBlockedTimes();
    } catch (error) {
      console.error('Erreur:', error);
      alert('Erreur lors de la suppression de la p√©riode');
    }
  };

  // Initialisation au chargement de la page
  document.addEventListener('DOMContentLoaded', function() {
    initTabs();
    initFilters();
    (window as any).loadAppointments(); // Charger les r√©servations par d√©faut
    (window as any).loadBlockedTimes(); // Charger aussi les p√©riodes bloqu√©es
    
    // Initialiser les dates minimales pour le formulaire de vacances
    const vacationStartInput = document.getElementById('vacationStartDate');
    const vacationEndInput = document.getElementById('vacationEndDate');
    if (vacationStartInput) vacationStartInput.min = today;
    if (vacationEndInput) vacationEndInput.min = today;
  });
</script>

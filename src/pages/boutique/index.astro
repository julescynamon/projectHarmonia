---
import MainLayout from '../../layouts/MainLayout.astro';
import ProductCard from '../../components/shop/ProductCard.astro';
import ProductFilters from '../../components/shop/ProductFilters.astro';
import ProductSearch from '../../components/shop/ProductSearch.astro';
import ProductSort from '../../components/shop/ProductSort.astro';
import Cart from '../../components/shop/Cart.astro';
import { getProducts } from '../../lib/shop';
import { pageSEO } from '../../lib/seo';
import type { Product } from '../../lib/shop';

const seo = pageSEO.shop;

// Récupération des paramètres de l'URL
const { searchParams } = Astro.url;
const query = searchParams.get('q') || '';
const sort = searchParams.get('sort') || 'newest';
const category = searchParams.get('category');
const minPrice = searchParams.get('minPrice');
const maxPrice = searchParams.get('maxPrice');

// Récupération des produits depuis Supabase
const products = await getProducts({
  category,
  search: query,
  sort,
  minPrice: minPrice ? parseFloat(minPrice) : null,
  maxPrice: maxPrice ? parseFloat(maxPrice) : null,
}) as Product[];

// Récupération des catégories uniques
const categories = [...new Set(products.map(p => p.category))];

---

<MainLayout
  title={seo.title}
  description={seo.description}
  image={seo.image}
>
  <Cart />
  
  <div class="pt-24">
    <section class="py-20">
      <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
          <div class="text-center mb-12" data-aos="fade-up">
            <h1 class="text-5xl font-medium mb-6">Boutique</h1>
            <div class="w-20 h-1 bg-sage mx-auto mb-8"></div>
            <p class="text-lg text-ebony/70">
              Des ressources pratiques pour prendre soin de sa santé naturellement
            </p>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
            <div class="lg:col-span-1">
              <ProductFilters
                categories={categories}
                activeCategory={category}
                minPrice={minPrice}
                maxPrice={maxPrice}
              />
            </div>

            <div class="lg:col-span-3">
              <ProductSearch query={query} />
              <ProductSort currentSort={sort} />

              <div id="products-grid" class="grid md:grid-cols-2 gap-8">
                {products.map(product => (
                  <ProductCard {...product} />
                ))}
              </div>

              <div id="no-products" class="hidden text-center text-ebony/70 py-12">
                Aucun produit ne correspond à votre recherche.
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </div>
</MainLayout>

<script>
  let currentFilters = {
    category: '',
    search: '',
    sort: 'newest',
    minPrice: null,
    maxPrice: null
  };

  let isLoading = false;
  let searchTimeout: ReturnType<typeof setTimeout>;

  // Fonction pour mettre à jour l'interface utilisateur
  function updateUI(products: any[]) {
    const productsGrid = document.getElementById('products-grid');
    const noProducts = document.getElementById('no-products');
    
    if (!productsGrid || !noProducts) return;

    if (!products || products.length === 0) {
      productsGrid.classList.add('hidden');
      noProducts.classList.remove('hidden');
    } else {
      productsGrid.classList.remove('hidden');
      noProducts.classList.add('hidden');
      productsGrid.innerHTML = products.map(product => `
        <article class="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow">
          <a href="/boutique/${product.id}" class="block">
            <div class="aspect-w-4 aspect-h-3">
              <img src="${product.image || '/images/placeholder.jpg'}" alt="${product.title}" loading="lazy" class="object-cover w-full h-full">
            </div>
            <div class="p-6">
              <div class="flex items-center gap-2 mb-2">
                <span class="text-sm bg-sage/10 text-sage px-2 py-1 rounded-full">
                  ${product.category}
                </span>
              </div>
              <h3 class="text-xl font-semibold mb-2">${product.title}</h3>
              <p class="text-ebony/70 mb-4 line-clamp-2">${product.description}</p>
              <div class="flex items-center justify-between">
                <span class="text-lg font-medium">${product.price.toFixed(2)} €</span>
                <span class="bg-sage text-white px-4 py-2 rounded-full hover:bg-sage/90 transition-colors">
                  Voir détails
                </span>
              </div>
            </div>
          </a>
        </article>
      `).join('');
    }
  }

  // Fonction pour charger les produits
  async function loadProducts(filters = {}) {
    if (isLoading) return;
    isLoading = true;

    // Construire l'URL avec les filtres
    const params = new URLSearchParams();
    Object.entries(filters).forEach(([key, value]) => {
      if (value) {
        if (key === 'search') {
          params.set('q', String(value));
        } else {
          params.set(key, String(value));
        }
      }
    });

    try {
      const response = await fetch(`/api/products?${params}`);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const products = await response.json();
      
      // Mettre à jour l'interface
      updateUI(products);

      // Mettre à jour l'URL
      const newUrl = `${window.location.pathname}?${params.toString()}`;
      window.history.pushState({}, '', newUrl);

    } catch (error) {
      console.error('Erreur lors du chargement des produits:', error);
      updateUI([]);
    } finally {
      isLoading = false;
    }
  }

  // Initialiser les filtres depuis l'URL
  function initFilters() {
    const urlParams = new URLSearchParams(window.location.search);
    currentFilters = {
      category: urlParams.get('category') || '',
      search: urlParams.get('q') || '',
      sort: urlParams.get('sort') || 'newest',
      minPrice: urlParams.get('minPrice') || null,
      maxPrice: urlParams.get('maxPrice') || null
    };
  }

  // Écouter les événements de recherche
  window.addEventListener('search-changed', ((e: CustomEvent) => {
    const searchValue = e.detail;
    if (currentFilters.search === searchValue) return;
    
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
      currentFilters.search = searchValue;
      loadProducts(currentFilters);
    }, 150);
  }) as EventListener);

  // Écouter les événements de filtres
  window.addEventListener('filters-changed', ((e: CustomEvent) => {
    const { category, minPrice, maxPrice } = e.detail;
    let hasChanged = false;

    if (category !== undefined && currentFilters.category !== category) {
      currentFilters.category = category;
      hasChanged = true;
    }
    if (minPrice !== undefined && currentFilters.minPrice !== minPrice) {
      currentFilters.minPrice = minPrice;
      hasChanged = true;
    }
    if (maxPrice !== undefined && currentFilters.maxPrice !== maxPrice) {
      currentFilters.maxPrice = maxPrice;
      hasChanged = true;
    }

    if (hasChanged) {
      loadProducts(currentFilters);
    }
  }) as EventListener);

  // Écouter les événements de tri
  window.addEventListener('sort-changed', ((e: CustomEvent) => {
    const sortValue = e.detail;
    if (currentFilters.sort === sortValue) return;
    
    currentFilters.sort = sortValue;
    loadProducts(currentFilters);
  }) as EventListener);

  // Initialiser au chargement de la page
  document.addEventListener('DOMContentLoaded', () => {
    initFilters();
    loadProducts(currentFilters);
  });
</script>
---
import MainLayout from '../layouts/MainLayout.astro';
import { pageSEO } from '../lib/seo';
import Button from '../components/ui/Button.astro';
import Card from '../components/ui/Card.astro';

const seo = pageSEO.contact;

const contactInfo = {
  address: '2063 route de cabaresse, 30760 Salazac',
  email: 'tyzranaima@gmail.com',
  phone: '06 67 22 97 43',
  hours: [
    { days: 'Lundi - Vendredi', time: '9h00 - 19h00' },
    { days: 'Samedi', time: '9h00 - 13h00' },
    { days: 'Dimanche', time: 'Fermé' }
  ],
  social: [
    { platform: 'Facebook', url: 'https://facebook.com/naimatyzra', icon: 'facebook' },
    { platform: 'Instagram', url: 'https://instagram.com/naimatyzra', icon: 'instagram' },
    { platform: 'LinkedIn', url: 'https://linkedin.com/in/naimatyzra', icon: 'linkedin' }
  ]
};
---

<MainLayout title={seo.title} description={seo.description}>
  <div class="pt-24">
    <!-- Hero Section -->
    <section class="py-20 bg-sage/5 relative overflow-hidden">
      <!-- Motifs de fond -->
      <div class="absolute inset-0 bg-geometric-pattern opacity-5"></div>
      <div class="absolute inset-0 bg-nature-pattern opacity-5"></div>

      <div class="container mx-auto px-4">
        <div class="max-w-3xl mx-auto text-center" data-aos="fade-up">
          <h1 class="font-heading text-4xl md:text-5xl lg:text-6xl text-ebony mb-6">
            Contactez-moi
          </h1>
          <p class="font-slogan text-lg md:text-xl text-eucalyptus">
            Je serai ravie de répondre à vos questions et de vous accompagner dans votre démarche de bien-être.
          </p>
        </div>
      </div>
    </section>

    <!-- Contact Section -->
    <section class="py-20">
      <div class="container mx-auto px-4">
        <div class="grid lg:grid-cols-2 gap-12">
          <!-- Formulaire -->
          <div data-aos="fade-right">
            <Card variant="hover" class="h-full">
              <form class="p-8 space-y-6" id="contactForm" method="POST" novalidate>
                <!-- Honeypot field -->
                <div class="hidden">
                  <input type="text" name="website" tabindex="-1" autocomplete="off" />
                </div>
                <div class="space-y-4">
                  <label class="block">
                    <span class="text-ebony mb-1 block">Nom complet</span>
                    <input
                      type="text"
                      name="name"
                      id="name"
                      required
                      minlength="2"
                      maxlength="100"
                      class="w-full px-4 py-2 rounded-lg border border-sage/20 focus:border-eucalyptus focus:ring-1 focus:ring-eucalyptus outline-none transition-colors"
                      placeholder="Votre nom"
                      autocomplete="name"
                    />
                  </label>

                  <label class="block">
                    <span class="text-ebony mb-1 block">Email</span>
                    <input
                      type="email"
                      name="email"
                      id="email"
                      required
                      maxlength="254"
                      class="w-full px-4 py-2 rounded-lg border border-sage/20 focus:border-eucalyptus focus:ring-1 focus:ring-eucalyptus outline-none transition-colors"
                      placeholder="votre@email.com"
                      autocomplete="email"
                    />
                  </label>

                  <label class="block">
                    <span class="text-ebony mb-1 block">Sujet</span>
                    <select
                      name="subject"
                      id="subject"
                      required
                      class="w-full px-4 py-2 rounded-lg border border-sage/20 focus:border-eucalyptus focus:ring-1 focus:ring-eucalyptus outline-none transition-colors"
                    >
                      <option value="">Sélectionnez un sujet</option>
                      <option value="consultation">Consultation</option>
                      <option value="question">Question générale</option>
                      <option value="partnership">Partenariat</option>
                      <option value="other">Autre</option>
                    </select>
                  </label>

                  <label class="block">
                    <span class="text-ebony mb-1 block">Message</span>
                    <textarea
                      name="message"
                      id="message"
                      required
                      minlength="10"
                      maxlength="1000"
                      rows="5"
                      class="w-full px-4 py-2 rounded-lg border border-sage/20 focus:border-eucalyptus focus:ring-1 focus:ring-eucalyptus outline-none transition-colors resize-none"
                      placeholder="Votre message..."
                    ></textarea>
                  </label>
                </div>

                <!-- Message de statut -->
                <div id="statusMessage" class="hidden p-4 rounded-lg text-sm">
                  <div class="flex items-center gap-2">
                    <span class="material-icons text-lg"></span>
                    <p></p>
                  </div>
                </div>

                <button 
                  type="button" 
                  id="submitButton"
                  class="w-full bg-eucalyptus text-white py-3 px-6 rounded-lg hover:bg-eucalyptus/90 transition-colors flex items-center justify-center gap-2"
                >
                  <span>Envoyer le message</span>
                </button>
              </form>
            </Card>
          </div>

          <!-- Informations de contact -->
          <div class="space-y-8" data-aos="fade-left">
            <!-- Carte -->
            <Card variant="feature">
              <div class="p-8">
                <h2 class="font-heading text-2xl text-ebony mb-6">
                  Informations de Contact
                </h2>

                <div class="space-y-4">
                  <div class="flex items-start gap-4">
                    <div class="w-10 h-10 rounded-full bg-sage/10 flex items-center justify-center shrink-0">
                      <span class="material-icons text-eucalyptus">location_on</span>
                    </div>
                    <div>
                      <h3 class="font-heading text-lg text-ebony mb-1">Adresse</h3>
                      <p class="text-eucalyptus">{contactInfo.address}</p>
                    </div>
                  </div>

                  <div class="flex items-start gap-4">
                    <div class="w-10 h-10 rounded-full bg-sage/10 flex items-center justify-center shrink-0">
                      <span class="material-icons text-eucalyptus">email</span>
                    </div>
                    <div>
                      <h3 class="font-heading text-lg text-ebony mb-1">Email</h3>
                      <a href={`mailto:${contactInfo.email}`} class="text-eucalyptus hover:text-gold transition-colors">
                        {contactInfo.email}
                      </a>
                    </div>
                  </div>

                  <div class="flex items-start gap-4">
                    <div class="w-10 h-10 rounded-full bg-sage/10 flex items-center justify-center shrink-0">
                      <span class="material-icons text-eucalyptus">phone</span>
                    </div>
                    <div>
                      <h3 class="font-heading text-lg text-ebony mb-1">Téléphone</h3>
                      <a href={`tel:${contactInfo.phone.replace(/\s/g, '')}`} class="text-eucalyptus hover:text-gold transition-colors">
                        {contactInfo.phone}
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </Card>

            <!-- Horaires -->
            <Card variant="feature">
              <div class="p-8">
                <h2 class="font-heading text-2xl text-ebony mb-6">
                  Horaires d'Ouverture
                </h2>

                <div class="space-y-4">
                  {contactInfo.hours.map(({ days, time }) => (
                    <div class="flex justify-between items-center">
                      <span class="text-eucalyptus">{days}</span>
                      <span class="font-heading text-ebony">{time}</span>
                    </div>
                  ))}
                </div>
              </div>
            </Card>

          </div>
        </div>
      </div>
    </section>
  </div>
</MainLayout>

<script>
  // Attendre que le DOM soit complètement chargé
  window.addEventListener('load', () => {
    console.log('Initialisation du formulaire de contact...');
    
    const form = document.querySelector('form');
    const submitButton = document.getElementById('submitButton');
    const statusMessage = document.getElementById('statusMessage');

    if (!form || !submitButton || !statusMessage) {
      console.error('Éléments du formulaire non trouvés');
      return;
    }

    // Rate limiting
    const RATE_LIMIT_MS = 60000; // 1 minute
    const lastSubmitTime = new Map();

    // Fonction pour échapper les caractères HTML
    function escapeHtml(unsafe: string): string {
      return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }

    function showStatus(message: string, type: 'success' | 'error' | 'info' = 'info') {
      const icon = statusMessage.querySelector('.material-icons');
      const text = statusMessage.querySelector('p');

      if (icon && text) {
        // Définir l'icône et la couleur en fonction du type
        switch (type) {
          case 'success':
            icon.textContent = 'check_circle';
            statusMessage.className = 'p-4 rounded-lg text-sm bg-green-50 text-green-700 border border-green-200';
            break;
          case 'error':
            icon.textContent = 'error';
            statusMessage.className = 'p-4 rounded-lg text-sm bg-red-50 text-red-700 border border-red-200';
            break;
          default:
            icon.textContent = 'info';
            statusMessage.className = 'p-4 rounded-lg text-sm bg-blue-50 text-blue-700 border border-blue-200';
        }

        text.textContent = escapeHtml(message);
        statusMessage.classList.remove('hidden');
      }
    }

    function hideStatus() {
      statusMessage.classList.add('hidden');
    }

    function showFieldError(field: string, message: string) {
      const input = document.getElementById(field);
      if (input) {
        input.classList.add('border-red-500');
        const errorDiv = document.createElement('div');
        errorDiv.className = 'text-sm text-red-500 mt-1';
        errorDiv.textContent = escapeHtml(message);
        input.parentElement?.appendChild(errorDiv);
      }
    }

    function clearFieldErrors() {
      document.querySelectorAll('.border-red-500').forEach(input => {
        input.classList.remove('border-red-500');
      });
      document.querySelectorAll('.text-red-500').forEach(error => error.remove());
    }

    function validateName(name: string): boolean {
      if (!name || name.length < 2) {
        return false;
      }
      return /^[a-zA-ZÀ-ÿ\s-]+$/.test(name);
    }

    function validateEmail(email: string): boolean {
      return email && /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(email);
    }

    function validateMessage(message: string): boolean {
      return message && message.length >= 10 && message.length <= 1000;
    }

    async function handleSubmit() {
      hideStatus();
      clearFieldErrors();

      // Vérification du rate limiting
      const now = Date.now();
      const lastSubmit = lastSubmitTime.get(form.id) || 0;
      if (now - lastSubmit < RATE_LIMIT_MS) {
        showStatus('Veuillez attendre avant d\'envoyer un nouveau message', 'error');
        return;
      }

      // Récupération et nettoyage des valeurs
      const nameInput = document.getElementById('name');
      const emailInput = document.getElementById('email');
      const subjectInput = document.getElementById('subject');
      const messageInput = document.getElementById('message');

      if (!nameInput || !emailInput || !subjectInput || !messageInput) {
        showStatus('Erreur: Formulaire incomplet', 'error');
        return;
      }

      // Vérification des types
      if (!(nameInput instanceof HTMLInputElement) ||
          !(emailInput instanceof HTMLInputElement) ||
          !(subjectInput instanceof HTMLSelectElement) ||
          !(messageInput instanceof HTMLTextAreaElement)) {
        showStatus('Erreur: Types de formulaire invalides', 'error');
        return;
      }

      const name = nameInput.value.trim() || '';
      const email = emailInput.value.trim() || '';
      const subject = subjectInput.value.trim() || '';
      const message = messageInput.value.trim() || '';

      // Validation des champs
      if (!validateName(name)) {
        showFieldError('name', 'Le nom doit contenir au moins 2 caractères et ne peut contenir que des lettres, espaces et tirets');
        showStatus('Veuillez corriger les erreurs dans le formulaire', 'error');
        return;
      }

      if (!validateEmail(email)) {
        showFieldError('email', 'Veuillez entrer une adresse email valide');
        showStatus('Veuillez corriger les erreurs dans le formulaire', 'error');
        return;
      }

      if (!subject) {
        showFieldError('subject', 'Veuillez sélectionner un sujet');
        showStatus('Veuillez corriger les erreurs dans le formulaire', 'error');
        return;
      }

      if (!validateMessage(message)) {
        showFieldError('message', 'Le message doit contenir entre 10 et 1000 caractères');
        showStatus('Veuillez corriger les erreurs dans le formulaire', 'error');
        return;
      }

      try {
        submitButton.disabled = true;
        submitButton.innerHTML = '<span>Envoi en cours...</span>';
        showStatus('Envoi du message en cours...', 'info');

        const response = await fetch('/api/contact', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '',
          },
          body: JSON.stringify({
            name,
            email,
            subject,
            message
          }),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || 'Erreur lors de l\'envoi du message');
        }

        form.reset();
        showStatus('Votre message a été envoyé avec succès ! Nous vous répondrons dans les plus brefs délais.', 'success');
        lastSubmitTime.set(form.id, now);
      } catch (error) {
        console.error('Erreur lors de l\'envoi:', error);
        showStatus(error instanceof Error ? error.message : 'Une erreur est survenue lors de l\'envoi du message', 'error');
      } finally {
        submitButton.disabled = false;
        submitButton.innerHTML = '<span>Envoyer le message</span>';
      }
    }

    // Ajouter l'écouteur d'événements au bouton
    submitButton.addEventListener('click', handleSubmit);
  });
</script>
---
declare global {
  interface Window {
    downloadFile: (productId: string, orderId: string) => void;
  }
}

import MainLayout from '../layouts/MainLayout.astro';

// Vérification de l'authentification
const supabase = Astro.locals.supabase;
const { data: { session }, error } = await supabase.auth.getSession();

console.log('Récupération de la session:', session); // Log pour vérifier la session
if (error) {
  console.error('Erreur lors de la récupération de la session:', error);
}
if (!session) {
  console.log('Aucune session trouvée, redirection vers la page de connexion.'); // Log pour indiquer la redirection
  return Astro.redirect('/login?returnTo=/');
}

// Récupération des commandes de l'utilisateur avec leurs produits
const { data: orders } = await supabase
  .from('orders')
  .select(`
    *,
    order_items (
      *,
      products (
        id,
        title,
        price,
        pdf_path
      )
    )
  `)
  .eq('user_id', session.user.id)
  .order('created_at', { ascending: false });

// Récupération des métadonnées de l'utilisateur
const { data: { user } } = await supabase.auth.getUser();
const userData = user?.user_metadata || {};
console.log('Données utilisateur récupérées:', userData); // Log pour vérifier les données utilisateur
---

<MainLayout
  title="Mon compte"
  description="Gérez vos informations personnelles et consultez vos commandes"
>
  <div class="pt-24">
    <section class="py-20">
      <div class="container mx-auto px-4">
        <div class="max-w-4xl mx-auto">
          <div class="text-center mb-12" data-aos="fade-up">
            <h1 class="text-5xl font-medium mb-6">Mon compte</h1>
            <div class="w-20 h-1 bg-primary mx-auto"></div>
          </div>

          <!-- Informations personnelles -->
          <div class="bg-white rounded-lg shadow-sm p-8 mb-8" data-aos="fade-up">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-2xl font-medium">Informations personnelles</h2>
              <button
                type="button"
                class="text-primary hover:text-primary/80 flex items-center gap-2"
                data-edit-profile
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
                Modifier
              </button>
            </div>

            <!-- Formulaire de profil (caché par défaut) -->
            <form class="hidden space-y-4 mb-6" data-profile-form>
              <div>
                <label for="name" class="block text-sm font-medium text-gray-700">Nom</label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={userData.name || ''}
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20"
                />
              </div>
              <div class="flex justify-end gap-4">
                <button
                  type="button"
                  class="px-4 py-2 text-gray-700 hover:text-gray-900"
                  data-cancel-edit
                >
                  Annuler
                </button>
                <button
                  type="submit"
                  class="bg-primary text-white px-4 py-2 rounded-full hover:bg-primary/90 transition-colors"
                >
                  Enregistrer
                </button>
              </div>
            </form>

            <!-- Affichage des informations -->
            <div class="space-y-4" data-profile-info>
              <p>
                <span class="font-medium">Nom :</span>
                <span data-profile-name>{userData.name || 'Non renseigné'}</span>
              </p>
              <p>
                <span class="font-medium">Email :</span>
                {session.user.email}
              </p>
              <p>
                <span class="font-medium">Membre depuis :</span>
                {new Date(session.user.created_at).toLocaleDateString('fr-FR')}
              </p>
            </div>
          </div>

          <!-- Historique des commandes -->
          <div class="bg-white rounded-lg shadow-sm p-8 mb-8" data-aos="fade-up">
            <h2 class="text-2xl font-medium mb-6">Mes commandes</h2>
            {orders && orders.length > 0 ? (
              <div class="space-y-6">
                {orders.map((order) => (
                  <div class="border rounded-lg p-6">
                    <div class="flex justify-between items-center mb-4">
                      <div>
                        <p class="font-medium">
                          Commande du {new Date(order.created_at).toLocaleDateString('fr-FR')}
                        </p>
                        <p class="text-sm text-gray-600">
                          Total : {order.total_amount.toFixed(2)}€
                        </p>
                      </div>
                      <span class="px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                        {order.status === 'completed' ? 'Payée' : 'En cours'}
                      </span>
                    </div>
                    <div class="space-y-4">
                      {order.order_items.map((item) => (
                        <div class="flex justify-between items-center">
                          <div class="flex items-center gap-4">
                            <span>{item.products.title}</span>
                            {item.products.pdf_path && (
                              <button
                                class="text-primary hover:text-primary/80 text-sm flex items-center gap-1"
                                onclick={`downloadFile('${item.products.id}', '${order.id}')`}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                                </svg>
                                Télécharger
                              </button>
                            )}
                          </div>
                          <span>{item.products.price.toFixed(2)}€</span>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p class="text-center text-gray-600">
                Vous n'avez pas encore passé de commande.
              </p>
            )}
          </div>

          <!-- Aide et support -->
          <div class="text-center" data-aos="fade-up">
            <h2 class="text-2xl font-medium mb-4">Besoin d'aide ?</h2>
            <p class="text-gray-600 mb-6">
              Notre équipe est là pour vous aider avec vos commandes et répondre à vos questions.
            </p>
            <a
              href="/contact"
              class="inline-flex items-center gap-2 bg-primary text-white px-6 py-3 rounded-full hover:bg-primary/90 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
              </svg>
              Nous contacter
            </a>
          </div>
        </div>
      </div>
    </section>
  </div>
</MainLayout>

<script>
  import { supabase } from '../lib/supabase';

  // Gestion de l'édition du profil
  const editButton = document.querySelector('[data-edit-profile]');
  const profileForm = document.querySelector('[data-profile-form]');
  const profileInfo = document.querySelector('[data-profile-info]');
  const cancelButton = document.querySelector('[data-cancel-edit]');
  const profileName = document.querySelector('[data-profile-name]');

  editButton?.addEventListener('click', () => {
    profileForm?.classList.remove('hidden');
    profileInfo?.classList.add('hidden');
  });

  cancelButton?.addEventListener('click', () => {
    profileForm?.classList.add('hidden');
    profileInfo?.classList.remove('hidden');
  });

  profileForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const form = e.target as HTMLFormElement;
    const nameInput = form.querySelector('#name') as HTMLInputElement;

    try {
      const { error } = await supabase.auth.updateUser({
        data: { name: nameInput.value }
      });

      if (error) throw error;

      // Mettre à jour l'affichage
      if (profileName) {
        profileName.textContent = nameInput.value || 'Non renseigné';
      }

      // Cacher le formulaire
      profileForm.classList.add('hidden');
      profileInfo?.classList.remove('hidden');

    } catch (error) {
      console.error('Erreur lors de la mise à jour du profil:', error);
      alert('Une erreur est survenue lors de la mise à jour du profil');
    }
  });

  // Fonction de téléchargement
  async function downloadFile(productId: string, orderId: string) {
    try {
      const response = await fetch(`/api/download?productId=${productId}&orderId=${orderId}`);
      const { url } = await response.json();
      window.open(url, '_blank');
    } catch (error) {
      console.error('Erreur lors du téléchargement:', error);
      alert('Une erreur est survenue lors du téléchargement');
    }
  }

  // Rendre la fonction disponible globalement
  window.downloadFile = downloadFile;
</script>

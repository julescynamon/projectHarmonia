---
import MainLayout from '../layouts/MainLayout.astro';
import { pageSEO } from '../lib/seo';
import Button from '../components/ui/Button.astro';
import Card from '../components/ui/Card.astro';

const seo = pageSEO.appointment;

const services = [
  {
    id: 'consultation',
    title: 'Consultation Naturopathie',
    duration: '1h30',
    price: '90€',
    description: 'Bilan de vitalité complet et plan d\'action personnalisé',
    icon: 'eco'
  },
  {
    id: 'suivi',
    title: 'Suivi Nutritionnel',
    duration: '1h',
    price: '75€',
    description: 'Accompagnement et ajustement de votre plan alimentaire',
    icon: 'restaurant'
  },
  {
    id: 'phyto',
    title: 'Consultation Phytothérapie',
    duration: '1h',
    price: '80€',
    description: 'Conseils personnalisés en plantes médicinales',
    icon: 'spa'
  },
  {
    id: 'massage',
    title: 'Massage Bien-être',
    duration: '1h',
    price: '85€',
    description: 'Massage relaxant aux huiles essentielles',
    icon: 'self_improvement'
  }
];

const timeSlots = [
  '09:00', '10:30', '12:00', '14:00', '15:30', '17:00'
];

const steps = [
  {
    title: 'Choisissez votre prestation',
    description: 'Sélectionnez le type de consultation qui correspond à vos besoins.',
    icon: 'assignment'
  },
  {
    title: 'Sélectionnez une date',
    description: 'Choisissez le jour qui vous convient le mieux dans le calendrier.',
    icon: 'calendar_today'
  },
  {
    title: 'Choisissez un horaire',
    description: 'Sélectionnez l\'horaire qui vous arrange parmi les créneaux disponibles.',
    icon: 'schedule'
  },
  {
    title: 'Confirmez votre rendez-vous',
    description: 'Remplissez vos informations et validez votre réservation.',
    icon: 'check_circle'
  }
];
---

<MainLayout title={seo.title} description={seo.description}>
  <div class="pt-24">
    <!-- Hero Section -->
    <section class="py-20 bg-sage/5 relative overflow-hidden">
      <!-- Motifs de fond -->
      <div class="absolute inset-0 bg-geometric-pattern opacity-5"></div>


      <div class="container mx-auto px-4">
        <div class="max-w-3xl mx-auto text-center" data-aos="fade-up">
          <h1 class="font-heading text-4xl md:text-5xl lg:text-6xl text-ebony mb-6">
            Prendre Rendez-vous
          </h1>
          <p class="font-slogan text-lg md:text-xl text-eucalyptus">
            Réservez votre consultation en quelques clics et commencez votre parcours vers le bien-être.
          </p>
        </div>
      </div>
    </section>

    <!-- Steps Section -->
    <section class="py-20">

      <div class="container mx-auto px-4">
        <h2 class="font-heading text-3xl md:text-4xl text-ebony mb-12 text-center">
          Comment ça marche ?
        </h2>

        <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
          {steps.map((step, index) => (
            <div data-aos="fade-up" data-aos-delay={index * 100}>
              <Card variant="feature" class="h-full">
                <div class="p-6 text-center">
                  <div class="w-16 h-16 rounded-full bg-sage/10 flex items-center justify-center mx-auto mb-6">
                    <span class="material-icons text-3xl text-eucalyptus">
                      {step.icon}
                    </span>
                  </div>
                  <h3 class="font-heading text-xl text-ebony mb-3">
                    {step.title}
                  </h3>
                  <p class="text-eucalyptus">
                    {step.description}
                  </p>
                </div>
              </Card>
            </div>
          ))}
        </div>
      </div>
    </section>

    <!-- Booking Section -->
    <section class="py-20 bg-sage/5 relative overflow-hidden">


      <div class="container mx-auto px-4">
        <div class="max-w-5xl mx-auto">
          <Card variant="hover">
            <div class="p-8">
              <form id="appointment-form" class="space-y-8">
                <!-- Services -->
                <div>
                  <h3 class="font-heading text-2xl text-ebony mb-6">
                    Choisissez votre prestation
                  </h3>
                  <div class="grid md:grid-cols-2 gap-6">
                    {services.map(service => (
                      <label class="cursor-pointer">
                        <input
                          type="radio"
                          name="service"
                          value={service.id}
                          class="peer hidden"
                        />
                        <div class="p-6 rounded-lg border-2 border-sage/20 hover:border-eucalyptus peer-checked:border-eucalyptus peer-checked:bg-sage/5 transition-colors">
                          <div class="flex items-start gap-4">
                            <div class="w-12 h-12 rounded-full bg-sage/10 flex items-center justify-center shrink-0">
                              <span class="material-icons text-2xl text-eucalyptus">
                                {service.icon}
                              </span>
                            </div>
                            <div>
                              <h4 class="font-heading text-lg text-ebony mb-1">
                                {service.title}
                              </h4>
                              <p class="text-eucalyptus text-sm mb-2">
                                {service.description}
                              </p>
                              <div class="flex items-center gap-4 text-sm">
                                <span class="flex items-center gap-1">
                                  <span class="material-icons text-gold text-base">schedule</span>
                                  <span class="text-eucalyptus">{service.duration}</span>
                                </span>
                                <span class="flex items-center gap-1">
                                  <span class="material-icons text-gold text-base">euro</span>
                                  <span class="text-eucalyptus">{service.price}</span>
                                </span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>

                <!-- Date -->
                <div>
                  <h3 class="font-heading text-2xl text-ebony mb-6">
                    Sélectionnez une date
                  </h3>
                  <input
                    type="date"
                    class="w-full px-4 py-2 rounded-lg border border-sage/20 focus:border-eucalyptus focus:ring-1 focus:ring-eucalyptus outline-none transition-colors"
                    required
                  />
                </div>

                <!-- Horaires -->
                <div>
                  <h3 class="font-heading text-2xl text-ebony mb-6">
                    Choisissez un horaire
                  </h3>
                  <div id="time-slots" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6 gap-4">
                    {timeSlots.map(time => (
                      <label class="cursor-pointer relative group">
                        <input
                          type="radio"
                          name="time"
                          data-time={time}
                          value={time}
                          class="peer hidden"
                        />
                        <div class="p-3 text-center rounded-lg border-2 border-sage/20 hover:border-eucalyptus peer-checked:border-eucalyptus peer-checked:bg-sage/5 transition-colors relative group-hover:border-eucalyptus">
                          <span class="text-eucalyptus group-hover:text-eucalyptus/80">{time}</span>
                          <div class="time-slot-status hidden absolute -top-2 -right-2 bg-red-500 text-white text-xs px-1.5 py-0.5 rounded-full shadow-sm">
                            ✕
                          </div>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>

                <!-- Informations personnelles -->
                <div>
                  <h3 class="font-heading text-2xl text-ebony mb-6">
                    Vos informations
                  </h3>
                  <div class="grid md:grid-cols-2 gap-6">
                    <label class="block">
                      <span class="text-ebony mb-1 block">Nom complet</span>
                      <input
                        type="text"
                        name="name"
                        required
                        class="w-full px-4 py-2 rounded-lg border border-sage/20 focus:border-eucalyptus focus:ring-1 focus:ring-eucalyptus outline-none transition-colors"
                        placeholder="Votre nom"
                      />
                    </label>

                    <label class="block">
                      <span class="text-ebony mb-1 block">Email</span>
                      <input
                        type="email"
                        name="email"
                        required
                        class="w-full px-4 py-2 rounded-lg border border-sage/20 focus:border-eucalyptus focus:ring-1 focus:ring-eucalyptus outline-none transition-colors"
                        placeholder="votre@email.com"
                      />
                    </label>

                    <label class="block">
                      <span class="text-ebony mb-1 block">Téléphone</span>
                      <input
                        type="tel"
                        required
                        class="w-full px-4 py-2 rounded-lg border border-sage/20 focus:border-eucalyptus focus:ring-1 focus:ring-eucalyptus outline-none transition-colors"
                        placeholder="Votre numéro"
                      />
                    </label>

                    <label class="block">
                      <span class="text-ebony mb-1 block">Motif de consultation</span>
                      <textarea
                        name="reason"
                        rows="3"
                        class="w-full px-4 py-2 rounded-lg border border-sage/20 focus:border-eucalyptus focus:ring-1 focus:ring-eucalyptus outline-none transition-colors resize-none"
                        placeholder="Décrivez brièvement le motif de votre consultation..."
                      ></textarea>
                    </label>
                  </div>
                </div>

                <!-- Submit -->
                <div class="text-center">
                  <Button type="submit" variant="primary" size="lg">
                    Confirmer le rendez-vous
                  </Button>
                </div>
              
              </form>

              <div id="error-message" class="hidden mt-4 p-4 bg-red-100 text-red-700 rounded-lg">
              </div>


            </div>
          </Card>
        </div>
      </div>
    </section>

    <!-- FAQ Section -->
    <section class="py-20 relative">

      <div class="container mx-auto px-4">
        <div class="max-w-3xl mx-auto">
          <h2 class="font-heading text-3xl md:text-4xl text-ebony mb-12 text-center">
            Questions Fréquentes
          </h2>

          <div class="space-y-6">
            {[
              {
                question: 'Comment annuler ou modifier mon rendez-vous ?',
                answer: 'Vous pouvez annuler ou modifier votre rendez-vous jusqu\'à 24h avant la consultation en me contactant par téléphone ou par email.'
              },
              {
                question: 'Quels sont les moyens de paiement acceptés ?',
                answer: 'J\'accepte les paiements par carte bancaire, espèces et virement bancaire. Le paiement s\'effectue le jour de la consultation.'
              },
              {
                question: 'Les consultations sont-elles remboursées ?',
                answer: 'Certaines mutuelles prennent en charge les consultations en naturopathie. Je vous invite à vous renseigner auprès de votre mutuelle.'
              }
            ].map(item => (
              <Card variant="feature">
                <div class="p-6">
                  <h3 class="font-heading text-xl text-ebony mb-3">{item.question}</h3>
                  <p class="text-eucalyptus">{item.answer}</p>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </section>
  </div>

<script>
  import { checkAvailability, isDayBlocked } from '../lib/availability';

  const form = document.getElementById('appointment-form');
  const dateInput = form.querySelector('input[type="date"]');
  const timeSlots = document.getElementById('time-slots');

  // Définir la date minimum à aujourd'hui
  const today = new Date();
  dateInput.min = today.toISOString().split('T')[0];

  // Vérifier si la date est bloquée avant de permettre la sélection
  dateInput.addEventListener('input', async (e) => {
    const selectedDate = e.target.value;
    if (!selectedDate) return;

    try {
      const isBlocked = await isDayBlocked(selectedDate);
      if (isBlocked) {
        alert('Cette journée n\'est pas disponible');
        dateInput.value = '';
        // Masquer et réinitialiser les créneaux horaires
        timeSlots.querySelectorAll('input[type="radio"]').forEach(input => {
          input.disabled = true;
          input.checked = false;
          const label = input.closest('label');
          label.classList.add('opacity-50', 'cursor-not-allowed');
          const statusDiv = label.querySelector('.time-slot-status');
          if (statusDiv) {
            statusDiv.classList.add('hidden');
          }
        });
      } else {
        // Si la date n'est pas bloquée, vérifier les créneaux disponibles
        checkTimeSlots();
      }
    } catch (error) {
      console.error('Erreur lors de la vérification de la date:', error);
      alert('Erreur lors de la vérification de la date. Veuillez réessayer.');
    }
  });

  // Vérifier les disponibilités lorsque la date change
  async function checkTimeSlots() {
    const selectedDate = dateInput.value;
    if (!selectedDate) return;

    const timeInputs = timeSlots.querySelectorAll('input[type="radio"]');
    
    // Désactiver tous les créneaux horaires pendant la vérification
    timeInputs.forEach(input => {
      input.disabled = true;
      input.checked = false;
      const label = input.closest('label');
      label.classList.add('opacity-50', 'cursor-not-allowed');
      const statusDiv = label.querySelector('.time-slot-status');
      if (statusDiv) {
        statusDiv.classList.add('hidden');
      }
    });

    try {
      // Vérifier chaque créneau horaire
      for (const input of timeInputs) {
        const time = input.value;
        console.log(`Vérification du créneau ${time}`);
        const isAvailable = await checkAvailability(selectedDate, time);
        
        const label = input.closest('label');
        const statusDiv = label.querySelector('.time-slot-status');
        
        if (isAvailable) {
          input.disabled = false;
          label.classList.remove('opacity-50', 'cursor-not-allowed');
          label.classList.add('cursor-pointer');
          if (statusDiv) {
            statusDiv.classList.add('hidden');
          }
        } else {
          input.disabled = true;
          label.classList.add('opacity-50', 'cursor-not-allowed');
          label.classList.remove('cursor-pointer');
          if (statusDiv) {
            statusDiv.classList.remove('hidden');
          }
        }
      }
    } catch (error) {
      console.error('Erreur lors de la vérification des disponibilités:', error);
      alert('Erreur lors de la vérification des disponibilités. Veuillez réessayer.');
    }
  }

  // Mettre à jour les créneaux quand la date change
  dateInput.addEventListener('change', checkTimeSlots);

  // Vérifier les disponibilités au chargement si une date est déjà sélectionnée
  if (dateInput.value) {
    checkTimeSlots();
  }

  // Avant la soumission du formulaire
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const selectedDate = dateInput.value;
    const selectedTime = form.querySelector('input[name="time"]:checked')?.value;
    const selectedService = form.querySelector('input[name="service"]:checked')?.value;
    const clientName = form.querySelector('input[name="name"]')?.value;
    const clientEmail = form.querySelector('input[name="email"]')?.value;
    const reason = form.querySelector('textarea[name="reason"]')?.value;
    
    if (!selectedDate || !selectedTime || !selectedService || !clientName || !clientEmail) {
      alert('Veuillez remplir tous les champs du formulaire');
      return;
    }

    try {
      // Vérifier une dernière fois la disponibilité
      const isAvailable = await checkAvailability(selectedDate, selectedTime);
      
      if (!isAvailable) {
        alert('Désolé, ce créneau n\'est plus disponible. Veuillez en choisir un autre.');
        return;
      }

      // Log des données envoyées
      const payload = {
        date: selectedDate,
        time: selectedTime,
        serviceId: selectedService,
        name: clientName,
        email: clientEmail,
        reason: reason
      };
      console.log('Données envoyées à l\'API:', payload);

      // Envoyer les données à l'API
      const response = await fetch('/api/appointments/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          date: selectedDate,
          time: selectedTime,
          serviceId: selectedService,
          name: clientName,
          email: clientEmail,
          reason: reason
        })
      });

      const data = await response.json();
      
      console.log('Réponse de l\'API:', data);
      
      if (response.ok && data.checkoutUrl) {
        // Rediriger vers Stripe
        window.location.href = data.checkoutUrl;
      } else {
        throw new Error(data.error || 'Erreur lors de la création du rendez-vous');
      }
    } catch (error) {
      console.error('Erreur lors de la création du rendez-vous:', error);
      alert('Une erreur est survenue. Veuillez réessayer.');
    }
  });
</script>
</MainLayout>
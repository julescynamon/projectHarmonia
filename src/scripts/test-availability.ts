// Script de test pour les fonctions de disponibilit√© (version simplifi√©e)
import { createClient } from '@supabase/supabase-js';

// Configuration de test
const supabaseUrl = process.env.PUBLIC_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.PUBLIC_SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

// Fonction isDayBlocked simplifi√©e pour le test
async function isDayBlocked(date: string): Promise<boolean> {
  try {
    const { data: blockedTimes, error: blockedError } = await supabase
      .from('blocked_times')
      .select('*')
      .lte('start_date', date)
      .gte('end_date', date);

    if (blockedError) {
      console.error('Erreur lors de la v√©rification du jour bloqu√©:', blockedError);
      return false;
    }

    // V√©rifier si une plage couvre toute la journ√©e (00:00 √† 23:59)
    if (blockedTimes && blockedTimes.length > 0) {
      for (const block of blockedTimes) {
        // Si la plage commence √† 00:00 et finit √† 23:59, c'est une journ√©e enti√®re bloqu√©e
        if (block.start_time === '00:00' && block.end_time === '23:59') {
          return true;
        }
        
        // Si la plage couvre toute la journ√©e de travail (par exemple 09:00 √† 18:00)
        // on peut consid√©rer que c'est une journ√©e enti√®re bloqu√©e
        if (block.start_time === '09:00' && block.end_time === '18:00') {
          return true;
        }
      }
    }

    return false;
  } catch (error) {
    console.error('Erreur lors de la v√©rification du jour:', error);
    return false;
  }
}

// Fonction checkAvailability simplifi√©e pour le test
async function checkAvailability(date: string, time: string): Promise<boolean> {
  try {
    console.log('V√©rification de disponibilit√© pour:', { date, time });

    // V√©rifier les rendez-vous existants
    const { data: appointments, error: appointmentsError } = await supabase
      .from('appointments')
      .select('*')
      .eq('date', date)
      .eq('time', time);

    if (appointmentsError) {
      console.error('Erreur lors de la v√©rification des rendez-vous:', appointmentsError);
      throw appointmentsError;
    }

    console.log('Rendez-vous existants:', appointments);

    // V√©rifier les plages bloqu√©es
    const { data: blockedTimes, error: blockedError } = await supabase
      .from('blocked_times')
      .select('*')
      .lte('start_date', date)
      .gte('end_date', date);

    if (blockedError) {
      console.error('Erreur lors de la v√©rification des plages bloqu√©es:', blockedError);
      throw blockedError;
    }

    console.log('Plages bloqu√©es trouv√©es:', blockedTimes);

    // Si des rendez-vous existent d√©j√† pour ce cr√©neau
    if (appointments && appointments.length > 0) {
      console.log(`Cr√©neau ${date} ${time} d√©j√† r√©serv√© par:`, appointments);
      return false;
    }

    // V√©rifier si l'horaire est dans une plage bloqu√©e
    if (blockedTimes && blockedTimes.length > 0) {
      console.log('V√©rification des plages bloqu√©es:', blockedTimes);
      
      for (const block of blockedTimes) {
        console.log('V√©rification de la plage:', {
          start_date: block.start_date,
          end_date: block.end_date,
          start_time: block.start_time,
          end_time: block.end_time
        });

        // Convertir les heures en minutes pour faciliter la comparaison
        const [blockStartHour, blockStartMin] = block.start_time.split(':').map(Number);
        const [blockEndHour, blockEndMin] = block.end_time.split(':').map(Number);
        const [timeHour, timeMin] = time.split(':').map(Number);

        const blockStartMinutes = blockStartHour * 60 + blockStartMin;
        const blockEndMinutes = blockEndHour * 60 + blockEndMin;
        const timeMinutes = timeHour * 60 + timeMin;

        console.log('Comparaison des minutes:', {
          blockStart: blockStartMinutes,
          blockEnd: blockEndMinutes,
          time: timeMinutes
        });

        if (timeMinutes >= blockStartMinutes && timeMinutes <= blockEndMinutes) {
          console.log(`Cr√©neau ${date} ${time} dans une p√©riode bloqu√©e:`, block);
          return false;
        }
      }
    }

    console.log(`Cr√©neau ${date} ${time} disponible`);
    return true;
  } catch (error) {
    console.error('Erreur lors de la v√©rification des disponibilit√©s:', error);
    throw error;
  }
}

// Fonction de test pour isDayBlocked
async function testIsDayBlocked() {
  console.log('üß™ Test de la fonction isDayBlocked...');
  
  try {
    // Test avec une date future
    const testDate = '2024-12-25';
    const isBlocked = await isDayBlocked(testDate);
    
    console.log(`Date test√©e: ${testDate}`);
    console.log(`Journ√©e bloqu√©e: ${isBlocked}`);
    
    if (isBlocked) {
      console.log('‚úÖ La fonction d√©tecte correctement une journ√©e bloqu√©e');
    } else {
      console.log('‚ÑπÔ∏è Aucune journ√©e bloqu√©e d√©tect√©e pour cette date');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de isDayBlocked:', error);
  }
}

// Fonction de test pour checkAvailability
async function testCheckAvailability() {
  console.log('\nüß™ Test de la fonction checkAvailability...');
  
  try {
    // Test avec une date et heure futures
    const testDate = '2024-12-25';
    const testTime = '14:00';
    
    const isAvailable = await checkAvailability(testDate, testTime);
    
    console.log(`Date test√©e: ${testDate}`);
    console.log(`Heure test√©e: ${testTime}`);
    console.log(`Cr√©neau disponible: ${isAvailable}`);
    
    if (isAvailable) {
      console.log('‚úÖ Le cr√©neau est disponible');
    } else {
      console.log('‚ÑπÔ∏è Le cr√©neau n\'est pas disponible');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de checkAvailability:', error);
  }
}

// Fonction principale de test
async function runTests() {
  console.log('üöÄ D√©marrage des tests de disponibilit√©...\n');
  
  await testIsDayBlocked();
  await testCheckAvailability();
  
  console.log('\n‚úÖ Tests termin√©s !');
}

// Ex√©cuter les tests
runTests().catch(console.error);

// Script de test pour les templates d'emails
import { getAppointmentNotificationEmailHtml } from '../lib/emails/appointment-notification';
import { getAppointmentConfirmationEmailHtml } from '../lib/emails/appointment-confirmation';
import { writeFileSync, mkdirSync } from 'fs';
import { join } from 'path';

// Donn√©es de test
const testAppointment = {
  id: 'test-123',
  date: '2024-02-15',
  time: '14:00',
  client_name: 'Marie Dupont',
  client_email: 'marie.dupont@example.com',
  reason: 'Consultation pour des probl√®mes de sommeil et de stress au travail'
};

const testService = {
  title: 'Naturopathie Humaine ‚Äì Premi√®re consultation',
  price: 150,
  duration: '1h30-2h'
};

// Fonction pour g√©n√©rer les emails de test
function generateTestEmails() {
  console.log('üîß G√©n√©ration des templates d\'emails de test...');

  // Cr√©er le dossier de sortie
  const outputDir = join(process.cwd(), 'test-output');
  try {
    mkdirSync(outputDir, { recursive: true });
  } catch (error) {
    // Le dossier existe d√©j√†
  }

  // G√©n√©rer l'email de notification admin
  const adminEmailHtml = getAppointmentNotificationEmailHtml({
    appointment: testAppointment,
    service: testService
  });

  // G√©n√©rer l'email de confirmation client
  const clientEmailHtml = getAppointmentConfirmationEmailHtml({
    appointment: testAppointment,
    service: testService
  });

  // Sauvegarder les fichiers
  writeFileSync(join(outputDir, 'admin-notification.html'), adminEmailHtml);
  writeFileSync(join(outputDir, 'client-confirmation.html'), clientEmailHtml);

  console.log('‚úÖ Templates g√©n√©r√©s avec succ√®s !');
  console.log('üìÅ Fichiers sauvegard√©s dans :', outputDir);
  console.log('   - admin-notification.html');
  console.log('   - client-confirmation.html');
  console.log('');
  console.log('üìß Vous pouvez ouvrir ces fichiers dans votre navigateur pour pr√©visualiser les emails.');
}

// Ex√©cuter le test
if (require.main === module) {
  generateTestEmails();
}

export { generateTestEmails };
